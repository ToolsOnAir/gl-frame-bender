#ifdef _MSC_VER
#pragma warning(push)        
#pragma warning(disable : 4018)
#pragma warning(disable : 4244)
#pragma warning(disable : 4267)
#endif

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fbt_format.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fbt_format.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fbt_format {

namespace {

const ::google::protobuf::Descriptor* StageTrace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StageTrace_reflection_ = NULL;
const ::google::protobuf::Descriptor* StageTrace_EventNameMapping_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StageTrace_EventNameMapping_reflection_ = NULL;
const ::google::protobuf::Descriptor* StageTrace_DeltaStatistic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StageTrace_DeltaStatistic_reflection_ = NULL;
const ::google::protobuf::Descriptor* StageTrace_EventTrace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StageTrace_EventTrace_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StageTrace_EventType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* OpenGLInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenGLInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TraceSession_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TraceSession_reflection_ = NULL;
const ::google::protobuf::Descriptor* TraceSession_SessionStatistic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TraceSession_SessionStatistic_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_fbt_5fformat_2eproto() {
  protobuf_AddDesc_fbt_5fformat_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "fbt_format.proto");
  GOOGLE_CHECK(file != NULL);
  StageTrace_descriptor_ = file->message_type(0);
  static const int StageTrace_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageTrace, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageTrace, event_traces_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageTrace, name_overrides_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageTrace, delta_statistics_),
  };
  StageTrace_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StageTrace_descriptor_,
      StageTrace::default_instance_,
      StageTrace_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageTrace, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageTrace, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StageTrace));
  StageTrace_EventNameMapping_descriptor_ = StageTrace_descriptor_->nested_type(0);
  static const int StageTrace_EventNameMapping_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageTrace_EventNameMapping, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageTrace_EventNameMapping, name_),
  };
  StageTrace_EventNameMapping_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StageTrace_EventNameMapping_descriptor_,
      StageTrace_EventNameMapping::default_instance_,
      StageTrace_EventNameMapping_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageTrace_EventNameMapping, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageTrace_EventNameMapping, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StageTrace_EventNameMapping));
  StageTrace_DeltaStatistic_descriptor_ = StageTrace_descriptor_->nested_type(1);
  static const int StageTrace_DeltaStatistic_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageTrace_DeltaStatistic, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageTrace_DeltaStatistic, begin_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageTrace_DeltaStatistic, end_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageTrace_DeltaStatistic, average_ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageTrace_DeltaStatistic, minimum_ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageTrace_DeltaStatistic, maximum_ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageTrace_DeltaStatistic, std_deviation_ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageTrace_DeltaStatistic, median_ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageTrace_DeltaStatistic, num_samples_),
  };
  StageTrace_DeltaStatistic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StageTrace_DeltaStatistic_descriptor_,
      StageTrace_DeltaStatistic::default_instance_,
      StageTrace_DeltaStatistic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageTrace_DeltaStatistic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageTrace_DeltaStatistic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StageTrace_DeltaStatistic));
  StageTrace_EventTrace_descriptor_ = StageTrace_descriptor_->nested_type(2);
  static const int StageTrace_EventTrace_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageTrace_EventTrace, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageTrace_EventTrace, trace_times_ns_),
  };
  StageTrace_EventTrace_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StageTrace_EventTrace_descriptor_,
      StageTrace_EventTrace::default_instance_,
      StageTrace_EventTrace_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageTrace_EventTrace, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageTrace_EventTrace, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StageTrace_EventTrace));
  StageTrace_EventType_descriptor_ = StageTrace_descriptor_->enum_type(0);
  OpenGLInfo_descriptor_ = file->message_type(1);
  static const int OpenGLInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenGLInfo, vendor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenGLInfo, renderer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenGLInfo, version_),
  };
  OpenGLInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenGLInfo_descriptor_,
      OpenGLInfo::default_instance_,
      OpenGLInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenGLInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenGLInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenGLInfo));
  TraceSession_descriptor_ = file->message_type(2);
  static const int TraceSession_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceSession, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceSession, opengl_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceSession, local_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceSession, stage_traces_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceSession, session_statistic_),
  };
  TraceSession_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TraceSession_descriptor_,
      TraceSession::default_instance_,
      TraceSession_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceSession, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceSession, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TraceSession));
  TraceSession_SessionStatistic_descriptor_ = TraceSession_descriptor_->nested_type(0);
  static const int TraceSession_SessionStatistic_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceSession_SessionStatistic, number_of_frames_processed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceSession_SessionStatistic, avg_throughput_mb_per_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceSession_SessionStatistic, med_frame_processing_time_per_frame_ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceSession_SessionStatistic, avg_millisecs_per_frame_),
  };
  TraceSession_SessionStatistic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TraceSession_SessionStatistic_descriptor_,
      TraceSession_SessionStatistic::default_instance_,
      TraceSession_SessionStatistic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceSession_SessionStatistic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceSession_SessionStatistic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TraceSession_SessionStatistic));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_fbt_5fformat_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StageTrace_descriptor_, &StageTrace::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StageTrace_EventNameMapping_descriptor_, &StageTrace_EventNameMapping::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StageTrace_DeltaStatistic_descriptor_, &StageTrace_DeltaStatistic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StageTrace_EventTrace_descriptor_, &StageTrace_EventTrace::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenGLInfo_descriptor_, &OpenGLInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TraceSession_descriptor_, &TraceSession::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TraceSession_SessionStatistic_descriptor_, &TraceSession_SessionStatistic::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_fbt_5fformat_2eproto() {
  delete StageTrace::default_instance_;
  delete StageTrace_reflection_;
  delete StageTrace_EventNameMapping::default_instance_;
  delete StageTrace_EventNameMapping_reflection_;
  delete StageTrace_DeltaStatistic::default_instance_;
  delete StageTrace_DeltaStatistic_reflection_;
  delete StageTrace_EventTrace::default_instance_;
  delete StageTrace_EventTrace_reflection_;
  delete OpenGLInfo::default_instance_;
  delete OpenGLInfo_reflection_;
  delete TraceSession::default_instance_;
  delete TraceSession_reflection_;
  delete TraceSession_SessionStatistic::default_instance_;
  delete TraceSession_SessionStatistic_reflection_;
}

void protobuf_AddDesc_fbt_5fformat_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020fbt_format.proto\022\nfbt_format\"\267\006\n\nStage"
    "Trace\022\014\n\004name\030\001 \002(\t\0227\n\014event_traces\030\002 \003("
    "\0132!.fbt_format.StageTrace.EventTrace\022\?\n\016"
    "name_overrides\030\003 \003(\0132\'.fbt_format.StageT"
    "race.EventNameMapping\022\?\n\020delta_statistic"
    "s\030\004 \003(\0132%.fbt_format.StageTrace.DeltaSta"
    "tistic\032P\n\020EventNameMapping\022.\n\004type\030\001 \002(\016"
    "2 .fbt_format.StageTrace.EventType\022\014\n\004na"
    "me\030\002 \002(\t\032\210\002\n\016DeltaStatistic\022\014\n\004name\030\001 \002("
    "\t\0225\n\013begin_event\030\002 \002(\0162 .fbt_format.Stag"
    "eTrace.EventType\0223\n\tend_event\030\003 \002(\0162 .fb"
    "t_format.StageTrace.EventType\022\022\n\naverage"
    "_ns\030\004 \002(\022\022\022\n\nminimum_ns\030\005 \002(\022\022\022\n\nmaximum"
    "_ns\030\006 \002(\022\022\030\n\020std_deviation_ns\030\007 \002(\022\022\021\n\tm"
    "edian_ns\030\010 \002(\022\022\023\n\013num_samples\030\t \002(\004\032X\n\nE"
    "ventTrace\022.\n\004type\030\001 \002(\0162 .fbt_format.Sta"
    "geTrace.EventType\022\032\n\016trace_times_ns\030\002 \003("
    "\022B\002\020\001\"\250\001\n\tEventType\022\021\n\rEXECUTE_BEGIN\020\001\022\031"
    "\n\025INPUT_TOKEN_AVAILABLE\020\002\022\032\n\026OUTPUT_TOKE"
    "N_AVAILABLE\020\003\022\016\n\nTASK_BEGIN\020\004\022\014\n\010TASK_EN"
    "D\020\005\022\017\n\013EXECUTE_END\020\006\022\021\n\rGL_TASK_BEGIN\020\007\022"
    "\017\n\013GL_TASK_END\020\010\"\?\n\nOpenGLInfo\022\016\n\006vendor"
    "\030\001 \002(\t\022\020\n\010renderer\030\002 \002(\t\022\017\n\007version\030\003 \002("
    "\t\"\376\002\n\014TraceSession\022\014\n\004name\030\001 \002(\t\022+\n\013open"
    "gl_info\030\002 \002(\0132\026.fbt_format.OpenGLInfo\022\022\n"
    "\nlocal_time\030\003 \002(\t\022,\n\014stage_traces\030\004 \003(\0132"
    "\026.fbt_format.StageTrace\022D\n\021session_stati"
    "stic\030\005 \001(\0132).fbt_format.TraceSession.Ses"
    "sionStatistic\032\252\001\n\020SessionStatistic\022\"\n\032nu"
    "mber_of_frames_processed\030\001 \002(\004\022!\n\031avg_th"
    "roughput_mb_per_sec\030\002 \002(\002\022.\n&med_frame_p"
    "rocessing_time_per_frame_ns\030\003 \002(\022\022\037\n\027avg"
    "_millisecs_per_frame\030\004 \001(\002", 1306);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fbt_format.proto", &protobuf_RegisterTypes);
  StageTrace::default_instance_ = new StageTrace();
  StageTrace_EventNameMapping::default_instance_ = new StageTrace_EventNameMapping();
  StageTrace_DeltaStatistic::default_instance_ = new StageTrace_DeltaStatistic();
  StageTrace_EventTrace::default_instance_ = new StageTrace_EventTrace();
  OpenGLInfo::default_instance_ = new OpenGLInfo();
  TraceSession::default_instance_ = new TraceSession();
  TraceSession_SessionStatistic::default_instance_ = new TraceSession_SessionStatistic();
  StageTrace::default_instance_->InitAsDefaultInstance();
  StageTrace_EventNameMapping::default_instance_->InitAsDefaultInstance();
  StageTrace_DeltaStatistic::default_instance_->InitAsDefaultInstance();
  StageTrace_EventTrace::default_instance_->InitAsDefaultInstance();
  OpenGLInfo::default_instance_->InitAsDefaultInstance();
  TraceSession::default_instance_->InitAsDefaultInstance();
  TraceSession_SessionStatistic::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_fbt_5fformat_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_fbt_5fformat_2eproto {
  StaticDescriptorInitializer_fbt_5fformat_2eproto() {
    protobuf_AddDesc_fbt_5fformat_2eproto();
  }
} static_descriptor_initializer_fbt_5fformat_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* StageTrace_EventType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StageTrace_EventType_descriptor_;
}
bool StageTrace_EventType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const StageTrace_EventType StageTrace::EXECUTE_BEGIN;
const StageTrace_EventType StageTrace::INPUT_TOKEN_AVAILABLE;
const StageTrace_EventType StageTrace::OUTPUT_TOKEN_AVAILABLE;
const StageTrace_EventType StageTrace::TASK_BEGIN;
const StageTrace_EventType StageTrace::TASK_END;
const StageTrace_EventType StageTrace::EXECUTE_END;
const StageTrace_EventType StageTrace::GL_TASK_BEGIN;
const StageTrace_EventType StageTrace::GL_TASK_END;
const StageTrace_EventType StageTrace::EventType_MIN;
const StageTrace_EventType StageTrace::EventType_MAX;
const int StageTrace::EventType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int StageTrace_EventNameMapping::kTypeFieldNumber;
const int StageTrace_EventNameMapping::kNameFieldNumber;
#endif  // !_MSC_VER

StageTrace_EventNameMapping::StageTrace_EventNameMapping()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fbt_format.StageTrace.EventNameMapping)
}

void StageTrace_EventNameMapping::InitAsDefaultInstance() {
}

StageTrace_EventNameMapping::StageTrace_EventNameMapping(const StageTrace_EventNameMapping& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fbt_format.StageTrace.EventNameMapping)
}

void StageTrace_EventNameMapping::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StageTrace_EventNameMapping::~StageTrace_EventNameMapping() {
  // @@protoc_insertion_point(destructor:fbt_format.StageTrace.EventNameMapping)
  SharedDtor();
}

void StageTrace_EventNameMapping::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void StageTrace_EventNameMapping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StageTrace_EventNameMapping::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StageTrace_EventNameMapping_descriptor_;
}

const StageTrace_EventNameMapping& StageTrace_EventNameMapping::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fbt_5fformat_2eproto();
  return *default_instance_;
}

StageTrace_EventNameMapping* StageTrace_EventNameMapping::default_instance_ = NULL;

StageTrace_EventNameMapping* StageTrace_EventNameMapping::New() const {
  return new StageTrace_EventNameMapping;
}

void StageTrace_EventNameMapping::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    type_ = 1;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StageTrace_EventNameMapping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fbt_format.StageTrace.EventNameMapping)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .fbt_format.StageTrace.EventType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fbt_format::StageTrace_EventType_IsValid(value)) {
            set_type(static_cast< ::fbt_format::StageTrace_EventType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fbt_format.StageTrace.EventNameMapping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fbt_format.StageTrace.EventNameMapping)
  return false;
#undef DO_
}

void StageTrace_EventNameMapping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fbt_format.StageTrace.EventNameMapping)
  // required .fbt_format.StageTrace.EventType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fbt_format.StageTrace.EventNameMapping)
}

::google::protobuf::uint8* StageTrace_EventNameMapping::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fbt_format.StageTrace.EventNameMapping)
  // required .fbt_format.StageTrace.EventType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fbt_format.StageTrace.EventNameMapping)
  return target;
}

int StageTrace_EventNameMapping::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .fbt_format.StageTrace.EventType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StageTrace_EventNameMapping::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StageTrace_EventNameMapping* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StageTrace_EventNameMapping*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StageTrace_EventNameMapping::MergeFrom(const StageTrace_EventNameMapping& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StageTrace_EventNameMapping::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StageTrace_EventNameMapping::CopyFrom(const StageTrace_EventNameMapping& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageTrace_EventNameMapping::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void StageTrace_EventNameMapping::Swap(StageTrace_EventNameMapping* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StageTrace_EventNameMapping::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StageTrace_EventNameMapping_descriptor_;
  metadata.reflection = StageTrace_EventNameMapping_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StageTrace_DeltaStatistic::kNameFieldNumber;
const int StageTrace_DeltaStatistic::kBeginEventFieldNumber;
const int StageTrace_DeltaStatistic::kEndEventFieldNumber;
const int StageTrace_DeltaStatistic::kAverageNsFieldNumber;
const int StageTrace_DeltaStatistic::kMinimumNsFieldNumber;
const int StageTrace_DeltaStatistic::kMaximumNsFieldNumber;
const int StageTrace_DeltaStatistic::kStdDeviationNsFieldNumber;
const int StageTrace_DeltaStatistic::kMedianNsFieldNumber;
const int StageTrace_DeltaStatistic::kNumSamplesFieldNumber;
#endif  // !_MSC_VER

StageTrace_DeltaStatistic::StageTrace_DeltaStatistic()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fbt_format.StageTrace.DeltaStatistic)
}

void StageTrace_DeltaStatistic::InitAsDefaultInstance() {
}

StageTrace_DeltaStatistic::StageTrace_DeltaStatistic(const StageTrace_DeltaStatistic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fbt_format.StageTrace.DeltaStatistic)
}

void StageTrace_DeltaStatistic::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  begin_event_ = 1;
  end_event_ = 1;
  average_ns_ = GOOGLE_LONGLONG(0);
  minimum_ns_ = GOOGLE_LONGLONG(0);
  maximum_ns_ = GOOGLE_LONGLONG(0);
  std_deviation_ns_ = GOOGLE_LONGLONG(0);
  median_ns_ = GOOGLE_LONGLONG(0);
  num_samples_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StageTrace_DeltaStatistic::~StageTrace_DeltaStatistic() {
  // @@protoc_insertion_point(destructor:fbt_format.StageTrace.DeltaStatistic)
  SharedDtor();
}

void StageTrace_DeltaStatistic::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void StageTrace_DeltaStatistic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StageTrace_DeltaStatistic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StageTrace_DeltaStatistic_descriptor_;
}

const StageTrace_DeltaStatistic& StageTrace_DeltaStatistic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fbt_5fformat_2eproto();
  return *default_instance_;
}

StageTrace_DeltaStatistic* StageTrace_DeltaStatistic::default_instance_ = NULL;

StageTrace_DeltaStatistic* StageTrace_DeltaStatistic::New() const {
  return new StageTrace_DeltaStatistic;
}

void StageTrace_DeltaStatistic::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StageTrace_DeltaStatistic*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(average_ns_, median_ns_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    begin_event_ = 1;
    end_event_ = 1;
  }
  num_samples_ = GOOGLE_ULONGLONG(0);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StageTrace_DeltaStatistic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fbt_format.StageTrace.DeltaStatistic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_begin_event;
        break;
      }

      // required .fbt_format.StageTrace.EventType begin_event = 2;
      case 2: {
        if (tag == 16) {
         parse_begin_event:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fbt_format::StageTrace_EventType_IsValid(value)) {
            set_begin_event(static_cast< ::fbt_format::StageTrace_EventType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_end_event;
        break;
      }

      // required .fbt_format.StageTrace.EventType end_event = 3;
      case 3: {
        if (tag == 24) {
         parse_end_event:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fbt_format::StageTrace_EventType_IsValid(value)) {
            set_end_event(static_cast< ::fbt_format::StageTrace_EventType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_average_ns;
        break;
      }

      // required sint64 average_ns = 4;
      case 4: {
        if (tag == 32) {
         parse_average_ns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &average_ns_)));
          set_has_average_ns();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_minimum_ns;
        break;
      }

      // required sint64 minimum_ns = 5;
      case 5: {
        if (tag == 40) {
         parse_minimum_ns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &minimum_ns_)));
          set_has_minimum_ns();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_maximum_ns;
        break;
      }

      // required sint64 maximum_ns = 6;
      case 6: {
        if (tag == 48) {
         parse_maximum_ns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &maximum_ns_)));
          set_has_maximum_ns();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_std_deviation_ns;
        break;
      }

      // required sint64 std_deviation_ns = 7;
      case 7: {
        if (tag == 56) {
         parse_std_deviation_ns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &std_deviation_ns_)));
          set_has_std_deviation_ns();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_median_ns;
        break;
      }

      // required sint64 median_ns = 8;
      case 8: {
        if (tag == 64) {
         parse_median_ns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &median_ns_)));
          set_has_median_ns();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_num_samples;
        break;
      }

      // required uint64 num_samples = 9;
      case 9: {
        if (tag == 72) {
         parse_num_samples:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_samples_)));
          set_has_num_samples();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fbt_format.StageTrace.DeltaStatistic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fbt_format.StageTrace.DeltaStatistic)
  return false;
#undef DO_
}

void StageTrace_DeltaStatistic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fbt_format.StageTrace.DeltaStatistic)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required .fbt_format.StageTrace.EventType begin_event = 2;
  if (has_begin_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->begin_event(), output);
  }

  // required .fbt_format.StageTrace.EventType end_event = 3;
  if (has_end_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->end_event(), output);
  }

  // required sint64 average_ns = 4;
  if (has_average_ns()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->average_ns(), output);
  }

  // required sint64 minimum_ns = 5;
  if (has_minimum_ns()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(5, this->minimum_ns(), output);
  }

  // required sint64 maximum_ns = 6;
  if (has_maximum_ns()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(6, this->maximum_ns(), output);
  }

  // required sint64 std_deviation_ns = 7;
  if (has_std_deviation_ns()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(7, this->std_deviation_ns(), output);
  }

  // required sint64 median_ns = 8;
  if (has_median_ns()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(8, this->median_ns(), output);
  }

  // required uint64 num_samples = 9;
  if (has_num_samples()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->num_samples(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fbt_format.StageTrace.DeltaStatistic)
}

::google::protobuf::uint8* StageTrace_DeltaStatistic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fbt_format.StageTrace.DeltaStatistic)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .fbt_format.StageTrace.EventType begin_event = 2;
  if (has_begin_event()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->begin_event(), target);
  }

  // required .fbt_format.StageTrace.EventType end_event = 3;
  if (has_end_event()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->end_event(), target);
  }

  // required sint64 average_ns = 4;
  if (has_average_ns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(4, this->average_ns(), target);
  }

  // required sint64 minimum_ns = 5;
  if (has_minimum_ns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(5, this->minimum_ns(), target);
  }

  // required sint64 maximum_ns = 6;
  if (has_maximum_ns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(6, this->maximum_ns(), target);
  }

  // required sint64 std_deviation_ns = 7;
  if (has_std_deviation_ns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(7, this->std_deviation_ns(), target);
  }

  // required sint64 median_ns = 8;
  if (has_median_ns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(8, this->median_ns(), target);
  }

  // required uint64 num_samples = 9;
  if (has_num_samples()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->num_samples(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fbt_format.StageTrace.DeltaStatistic)
  return target;
}

int StageTrace_DeltaStatistic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .fbt_format.StageTrace.EventType begin_event = 2;
    if (has_begin_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->begin_event());
    }

    // required .fbt_format.StageTrace.EventType end_event = 3;
    if (has_end_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->end_event());
    }

    // required sint64 average_ns = 4;
    if (has_average_ns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->average_ns());
    }

    // required sint64 minimum_ns = 5;
    if (has_minimum_ns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->minimum_ns());
    }

    // required sint64 maximum_ns = 6;
    if (has_maximum_ns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->maximum_ns());
    }

    // required sint64 std_deviation_ns = 7;
    if (has_std_deviation_ns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->std_deviation_ns());
    }

    // required sint64 median_ns = 8;
    if (has_median_ns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->median_ns());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint64 num_samples = 9;
    if (has_num_samples()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num_samples());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StageTrace_DeltaStatistic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StageTrace_DeltaStatistic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StageTrace_DeltaStatistic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StageTrace_DeltaStatistic::MergeFrom(const StageTrace_DeltaStatistic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_begin_event()) {
      set_begin_event(from.begin_event());
    }
    if (from.has_end_event()) {
      set_end_event(from.end_event());
    }
    if (from.has_average_ns()) {
      set_average_ns(from.average_ns());
    }
    if (from.has_minimum_ns()) {
      set_minimum_ns(from.minimum_ns());
    }
    if (from.has_maximum_ns()) {
      set_maximum_ns(from.maximum_ns());
    }
    if (from.has_std_deviation_ns()) {
      set_std_deviation_ns(from.std_deviation_ns());
    }
    if (from.has_median_ns()) {
      set_median_ns(from.median_ns());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_num_samples()) {
      set_num_samples(from.num_samples());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StageTrace_DeltaStatistic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StageTrace_DeltaStatistic::CopyFrom(const StageTrace_DeltaStatistic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageTrace_DeltaStatistic::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void StageTrace_DeltaStatistic::Swap(StageTrace_DeltaStatistic* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(begin_event_, other->begin_event_);
    std::swap(end_event_, other->end_event_);
    std::swap(average_ns_, other->average_ns_);
    std::swap(minimum_ns_, other->minimum_ns_);
    std::swap(maximum_ns_, other->maximum_ns_);
    std::swap(std_deviation_ns_, other->std_deviation_ns_);
    std::swap(median_ns_, other->median_ns_);
    std::swap(num_samples_, other->num_samples_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StageTrace_DeltaStatistic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StageTrace_DeltaStatistic_descriptor_;
  metadata.reflection = StageTrace_DeltaStatistic_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StageTrace_EventTrace::kTypeFieldNumber;
const int StageTrace_EventTrace::kTraceTimesNsFieldNumber;
#endif  // !_MSC_VER

StageTrace_EventTrace::StageTrace_EventTrace()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fbt_format.StageTrace.EventTrace)
}

void StageTrace_EventTrace::InitAsDefaultInstance() {
}

StageTrace_EventTrace::StageTrace_EventTrace(const StageTrace_EventTrace& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fbt_format.StageTrace.EventTrace)
}

void StageTrace_EventTrace::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StageTrace_EventTrace::~StageTrace_EventTrace() {
  // @@protoc_insertion_point(destructor:fbt_format.StageTrace.EventTrace)
  SharedDtor();
}

void StageTrace_EventTrace::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StageTrace_EventTrace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StageTrace_EventTrace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StageTrace_EventTrace_descriptor_;
}

const StageTrace_EventTrace& StageTrace_EventTrace::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fbt_5fformat_2eproto();
  return *default_instance_;
}

StageTrace_EventTrace* StageTrace_EventTrace::default_instance_ = NULL;

StageTrace_EventTrace* StageTrace_EventTrace::New() const {
  return new StageTrace_EventTrace;
}

void StageTrace_EventTrace::Clear() {
  type_ = 1;
  trace_times_ns_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StageTrace_EventTrace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fbt_format.StageTrace.EventTrace)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .fbt_format.StageTrace.EventType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fbt_format::StageTrace_EventType_IsValid(value)) {
            set_type(static_cast< ::fbt_format::StageTrace_EventType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_trace_times_ns;
        break;
      }

      // repeated sint64 trace_times_ns = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_trace_times_ns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_trace_times_ns())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 18, input, this->mutable_trace_times_ns())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fbt_format.StageTrace.EventTrace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fbt_format.StageTrace.EventTrace)
  return false;
#undef DO_
}

void StageTrace_EventTrace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fbt_format.StageTrace.EventTrace)
  // required .fbt_format.StageTrace.EventType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated sint64 trace_times_ns = 2 [packed = true];
  if (this->trace_times_ns_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_trace_times_ns_cached_byte_size_);
  }
  for (int i = 0; i < this->trace_times_ns_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64NoTag(
      this->trace_times_ns(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fbt_format.StageTrace.EventTrace)
}

::google::protobuf::uint8* StageTrace_EventTrace::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fbt_format.StageTrace.EventTrace)
  // required .fbt_format.StageTrace.EventType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated sint64 trace_times_ns = 2 [packed = true];
  if (this->trace_times_ns_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _trace_times_ns_cached_byte_size_, target);
  }
  for (int i = 0; i < this->trace_times_ns_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64NoTagToArray(this->trace_times_ns(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fbt_format.StageTrace.EventTrace)
  return target;
}

int StageTrace_EventTrace::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .fbt_format.StageTrace.EventType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated sint64 trace_times_ns = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->trace_times_ns_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->trace_times_ns(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _trace_times_ns_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StageTrace_EventTrace::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StageTrace_EventTrace* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StageTrace_EventTrace*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StageTrace_EventTrace::MergeFrom(const StageTrace_EventTrace& from) {
  GOOGLE_CHECK_NE(&from, this);
  trace_times_ns_.MergeFrom(from.trace_times_ns_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StageTrace_EventTrace::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StageTrace_EventTrace::CopyFrom(const StageTrace_EventTrace& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageTrace_EventTrace::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StageTrace_EventTrace::Swap(StageTrace_EventTrace* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    trace_times_ns_.Swap(&other->trace_times_ns_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StageTrace_EventTrace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StageTrace_EventTrace_descriptor_;
  metadata.reflection = StageTrace_EventTrace_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StageTrace::kNameFieldNumber;
const int StageTrace::kEventTracesFieldNumber;
const int StageTrace::kNameOverridesFieldNumber;
const int StageTrace::kDeltaStatisticsFieldNumber;
#endif  // !_MSC_VER

StageTrace::StageTrace()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fbt_format.StageTrace)
}

void StageTrace::InitAsDefaultInstance() {
}

StageTrace::StageTrace(const StageTrace& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fbt_format.StageTrace)
}

void StageTrace::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StageTrace::~StageTrace() {
  // @@protoc_insertion_point(destructor:fbt_format.StageTrace)
  SharedDtor();
}

void StageTrace::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void StageTrace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StageTrace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StageTrace_descriptor_;
}

const StageTrace& StageTrace::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fbt_5fformat_2eproto();
  return *default_instance_;
}

StageTrace* StageTrace::default_instance_ = NULL;

StageTrace* StageTrace::New() const {
  return new StageTrace;
}

void StageTrace::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  event_traces_.Clear();
  name_overrides_.Clear();
  delta_statistics_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StageTrace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fbt_format.StageTrace)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_event_traces;
        break;
      }

      // repeated .fbt_format.StageTrace.EventTrace event_traces = 2;
      case 2: {
        if (tag == 18) {
         parse_event_traces:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_event_traces()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_event_traces;
        if (input->ExpectTag(26)) goto parse_name_overrides;
        break;
      }

      // repeated .fbt_format.StageTrace.EventNameMapping name_overrides = 3;
      case 3: {
        if (tag == 26) {
         parse_name_overrides:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_name_overrides()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name_overrides;
        if (input->ExpectTag(34)) goto parse_delta_statistics;
        break;
      }

      // repeated .fbt_format.StageTrace.DeltaStatistic delta_statistics = 4;
      case 4: {
        if (tag == 34) {
         parse_delta_statistics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_delta_statistics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_delta_statistics;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fbt_format.StageTrace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fbt_format.StageTrace)
  return false;
#undef DO_
}

void StageTrace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fbt_format.StageTrace)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .fbt_format.StageTrace.EventTrace event_traces = 2;
  for (int i = 0; i < this->event_traces_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->event_traces(i), output);
  }

  // repeated .fbt_format.StageTrace.EventNameMapping name_overrides = 3;
  for (int i = 0; i < this->name_overrides_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->name_overrides(i), output);
  }

  // repeated .fbt_format.StageTrace.DeltaStatistic delta_statistics = 4;
  for (int i = 0; i < this->delta_statistics_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->delta_statistics(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fbt_format.StageTrace)
}

::google::protobuf::uint8* StageTrace::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fbt_format.StageTrace)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .fbt_format.StageTrace.EventTrace event_traces = 2;
  for (int i = 0; i < this->event_traces_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->event_traces(i), target);
  }

  // repeated .fbt_format.StageTrace.EventNameMapping name_overrides = 3;
  for (int i = 0; i < this->name_overrides_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->name_overrides(i), target);
  }

  // repeated .fbt_format.StageTrace.DeltaStatistic delta_statistics = 4;
  for (int i = 0; i < this->delta_statistics_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->delta_statistics(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fbt_format.StageTrace)
  return target;
}

int StageTrace::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .fbt_format.StageTrace.EventTrace event_traces = 2;
  total_size += 1 * this->event_traces_size();
  for (int i = 0; i < this->event_traces_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->event_traces(i));
  }

  // repeated .fbt_format.StageTrace.EventNameMapping name_overrides = 3;
  total_size += 1 * this->name_overrides_size();
  for (int i = 0; i < this->name_overrides_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->name_overrides(i));
  }

  // repeated .fbt_format.StageTrace.DeltaStatistic delta_statistics = 4;
  total_size += 1 * this->delta_statistics_size();
  for (int i = 0; i < this->delta_statistics_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->delta_statistics(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StageTrace::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StageTrace* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StageTrace*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StageTrace::MergeFrom(const StageTrace& from) {
  GOOGLE_CHECK_NE(&from, this);
  event_traces_.MergeFrom(from.event_traces_);
  name_overrides_.MergeFrom(from.name_overrides_);
  delta_statistics_.MergeFrom(from.delta_statistics_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StageTrace::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StageTrace::CopyFrom(const StageTrace& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageTrace::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->event_traces())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->name_overrides())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->delta_statistics())) return false;
  return true;
}

void StageTrace::Swap(StageTrace* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    event_traces_.Swap(&other->event_traces_);
    name_overrides_.Swap(&other->name_overrides_);
    delta_statistics_.Swap(&other->delta_statistics_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StageTrace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StageTrace_descriptor_;
  metadata.reflection = StageTrace_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenGLInfo::kVendorFieldNumber;
const int OpenGLInfo::kRendererFieldNumber;
const int OpenGLInfo::kVersionFieldNumber;
#endif  // !_MSC_VER

OpenGLInfo::OpenGLInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fbt_format.OpenGLInfo)
}

void OpenGLInfo::InitAsDefaultInstance() {
}

OpenGLInfo::OpenGLInfo(const OpenGLInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fbt_format.OpenGLInfo)
}

void OpenGLInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  vendor_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  renderer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenGLInfo::~OpenGLInfo() {
  // @@protoc_insertion_point(destructor:fbt_format.OpenGLInfo)
  SharedDtor();
}

void OpenGLInfo::SharedDtor() {
  if (vendor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vendor_;
  }
  if (renderer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete renderer_;
  }
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void OpenGLInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenGLInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenGLInfo_descriptor_;
}

const OpenGLInfo& OpenGLInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fbt_5fformat_2eproto();
  return *default_instance_;
}

OpenGLInfo* OpenGLInfo::default_instance_ = NULL;

OpenGLInfo* OpenGLInfo::New() const {
  return new OpenGLInfo;
}

void OpenGLInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_vendor()) {
      if (vendor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vendor_->clear();
      }
    }
    if (has_renderer()) {
      if (renderer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        renderer_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenGLInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fbt_format.OpenGLInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string vendor = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vendor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vendor().data(), this->vendor().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vendor");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_renderer;
        break;
      }

      // required string renderer = 2;
      case 2: {
        if (tag == 18) {
         parse_renderer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_renderer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->renderer().data(), this->renderer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "renderer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_version;
        break;
      }

      // required string version = 3;
      case 3: {
        if (tag == 26) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fbt_format.OpenGLInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fbt_format.OpenGLInfo)
  return false;
#undef DO_
}

void OpenGLInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fbt_format.OpenGLInfo)
  // required string vendor = 1;
  if (has_vendor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vendor().data(), this->vendor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vendor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->vendor(), output);
  }

  // required string renderer = 2;
  if (has_renderer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->renderer().data(), this->renderer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "renderer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->renderer(), output);
  }

  // required string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fbt_format.OpenGLInfo)
}

::google::protobuf::uint8* OpenGLInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fbt_format.OpenGLInfo)
  // required string vendor = 1;
  if (has_vendor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vendor().data(), this->vendor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vendor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->vendor(), target);
  }

  // required string renderer = 2;
  if (has_renderer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->renderer().data(), this->renderer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "renderer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->renderer(), target);
  }

  // required string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fbt_format.OpenGLInfo)
  return target;
}

int OpenGLInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string vendor = 1;
    if (has_vendor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vendor());
    }

    // required string renderer = 2;
    if (has_renderer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->renderer());
    }

    // required string version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenGLInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenGLInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenGLInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenGLInfo::MergeFrom(const OpenGLInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vendor()) {
      set_vendor(from.vendor());
    }
    if (from.has_renderer()) {
      set_renderer(from.renderer());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenGLInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenGLInfo::CopyFrom(const OpenGLInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenGLInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void OpenGLInfo::Swap(OpenGLInfo* other) {
  if (other != this) {
    std::swap(vendor_, other->vendor_);
    std::swap(renderer_, other->renderer_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenGLInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenGLInfo_descriptor_;
  metadata.reflection = OpenGLInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TraceSession_SessionStatistic::kNumberOfFramesProcessedFieldNumber;
const int TraceSession_SessionStatistic::kAvgThroughputMbPerSecFieldNumber;
const int TraceSession_SessionStatistic::kMedFrameProcessingTimePerFrameNsFieldNumber;
const int TraceSession_SessionStatistic::kAvgMillisecsPerFrameFieldNumber;
#endif  // !_MSC_VER

TraceSession_SessionStatistic::TraceSession_SessionStatistic()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fbt_format.TraceSession.SessionStatistic)
}

void TraceSession_SessionStatistic::InitAsDefaultInstance() {
}

TraceSession_SessionStatistic::TraceSession_SessionStatistic(const TraceSession_SessionStatistic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fbt_format.TraceSession.SessionStatistic)
}

void TraceSession_SessionStatistic::SharedCtor() {
  _cached_size_ = 0;
  number_of_frames_processed_ = GOOGLE_ULONGLONG(0);
  avg_throughput_mb_per_sec_ = 0;
  med_frame_processing_time_per_frame_ns_ = GOOGLE_LONGLONG(0);
  avg_millisecs_per_frame_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TraceSession_SessionStatistic::~TraceSession_SessionStatistic() {
  // @@protoc_insertion_point(destructor:fbt_format.TraceSession.SessionStatistic)
  SharedDtor();
}

void TraceSession_SessionStatistic::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TraceSession_SessionStatistic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TraceSession_SessionStatistic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TraceSession_SessionStatistic_descriptor_;
}

const TraceSession_SessionStatistic& TraceSession_SessionStatistic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fbt_5fformat_2eproto();
  return *default_instance_;
}

TraceSession_SessionStatistic* TraceSession_SessionStatistic::default_instance_ = NULL;

TraceSession_SessionStatistic* TraceSession_SessionStatistic::New() const {
  return new TraceSession_SessionStatistic;
}

void TraceSession_SessionStatistic::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TraceSession_SessionStatistic*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(number_of_frames_processed_, avg_millisecs_per_frame_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TraceSession_SessionStatistic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fbt_format.TraceSession.SessionStatistic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 number_of_frames_processed = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &number_of_frames_processed_)));
          set_has_number_of_frames_processed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_avg_throughput_mb_per_sec;
        break;
      }

      // required float avg_throughput_mb_per_sec = 2;
      case 2: {
        if (tag == 21) {
         parse_avg_throughput_mb_per_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &avg_throughput_mb_per_sec_)));
          set_has_avg_throughput_mb_per_sec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_med_frame_processing_time_per_frame_ns;
        break;
      }

      // required sint64 med_frame_processing_time_per_frame_ns = 3;
      case 3: {
        if (tag == 24) {
         parse_med_frame_processing_time_per_frame_ns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &med_frame_processing_time_per_frame_ns_)));
          set_has_med_frame_processing_time_per_frame_ns();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_avg_millisecs_per_frame;
        break;
      }

      // optional float avg_millisecs_per_frame = 4;
      case 4: {
        if (tag == 37) {
         parse_avg_millisecs_per_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &avg_millisecs_per_frame_)));
          set_has_avg_millisecs_per_frame();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fbt_format.TraceSession.SessionStatistic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fbt_format.TraceSession.SessionStatistic)
  return false;
#undef DO_
}

void TraceSession_SessionStatistic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fbt_format.TraceSession.SessionStatistic)
  // required uint64 number_of_frames_processed = 1;
  if (has_number_of_frames_processed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->number_of_frames_processed(), output);
  }

  // required float avg_throughput_mb_per_sec = 2;
  if (has_avg_throughput_mb_per_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->avg_throughput_mb_per_sec(), output);
  }

  // required sint64 med_frame_processing_time_per_frame_ns = 3;
  if (has_med_frame_processing_time_per_frame_ns()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->med_frame_processing_time_per_frame_ns(), output);
  }

  // optional float avg_millisecs_per_frame = 4;
  if (has_avg_millisecs_per_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->avg_millisecs_per_frame(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fbt_format.TraceSession.SessionStatistic)
}

::google::protobuf::uint8* TraceSession_SessionStatistic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fbt_format.TraceSession.SessionStatistic)
  // required uint64 number_of_frames_processed = 1;
  if (has_number_of_frames_processed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->number_of_frames_processed(), target);
  }

  // required float avg_throughput_mb_per_sec = 2;
  if (has_avg_throughput_mb_per_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->avg_throughput_mb_per_sec(), target);
  }

  // required sint64 med_frame_processing_time_per_frame_ns = 3;
  if (has_med_frame_processing_time_per_frame_ns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->med_frame_processing_time_per_frame_ns(), target);
  }

  // optional float avg_millisecs_per_frame = 4;
  if (has_avg_millisecs_per_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->avg_millisecs_per_frame(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fbt_format.TraceSession.SessionStatistic)
  return target;
}

int TraceSession_SessionStatistic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 number_of_frames_processed = 1;
    if (has_number_of_frames_processed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->number_of_frames_processed());
    }

    // required float avg_throughput_mb_per_sec = 2;
    if (has_avg_throughput_mb_per_sec()) {
      total_size += 1 + 4;
    }

    // required sint64 med_frame_processing_time_per_frame_ns = 3;
    if (has_med_frame_processing_time_per_frame_ns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->med_frame_processing_time_per_frame_ns());
    }

    // optional float avg_millisecs_per_frame = 4;
    if (has_avg_millisecs_per_frame()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TraceSession_SessionStatistic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TraceSession_SessionStatistic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TraceSession_SessionStatistic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TraceSession_SessionStatistic::MergeFrom(const TraceSession_SessionStatistic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number_of_frames_processed()) {
      set_number_of_frames_processed(from.number_of_frames_processed());
    }
    if (from.has_avg_throughput_mb_per_sec()) {
      set_avg_throughput_mb_per_sec(from.avg_throughput_mb_per_sec());
    }
    if (from.has_med_frame_processing_time_per_frame_ns()) {
      set_med_frame_processing_time_per_frame_ns(from.med_frame_processing_time_per_frame_ns());
    }
    if (from.has_avg_millisecs_per_frame()) {
      set_avg_millisecs_per_frame(from.avg_millisecs_per_frame());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TraceSession_SessionStatistic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TraceSession_SessionStatistic::CopyFrom(const TraceSession_SessionStatistic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceSession_SessionStatistic::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TraceSession_SessionStatistic::Swap(TraceSession_SessionStatistic* other) {
  if (other != this) {
    std::swap(number_of_frames_processed_, other->number_of_frames_processed_);
    std::swap(avg_throughput_mb_per_sec_, other->avg_throughput_mb_per_sec_);
    std::swap(med_frame_processing_time_per_frame_ns_, other->med_frame_processing_time_per_frame_ns_);
    std::swap(avg_millisecs_per_frame_, other->avg_millisecs_per_frame_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TraceSession_SessionStatistic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TraceSession_SessionStatistic_descriptor_;
  metadata.reflection = TraceSession_SessionStatistic_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TraceSession::kNameFieldNumber;
const int TraceSession::kOpenglInfoFieldNumber;
const int TraceSession::kLocalTimeFieldNumber;
const int TraceSession::kStageTracesFieldNumber;
const int TraceSession::kSessionStatisticFieldNumber;
#endif  // !_MSC_VER

TraceSession::TraceSession()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fbt_format.TraceSession)
}

void TraceSession::InitAsDefaultInstance() {
  opengl_info_ = const_cast< ::fbt_format::OpenGLInfo*>(&::fbt_format::OpenGLInfo::default_instance());
  session_statistic_ = const_cast< ::fbt_format::TraceSession_SessionStatistic*>(&::fbt_format::TraceSession_SessionStatistic::default_instance());
}

TraceSession::TraceSession(const TraceSession& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fbt_format.TraceSession)
}

void TraceSession::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  opengl_info_ = NULL;
  local_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_statistic_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TraceSession::~TraceSession() {
  // @@protoc_insertion_point(destructor:fbt_format.TraceSession)
  SharedDtor();
}

void TraceSession::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (local_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete local_time_;
  }
  if (this != default_instance_) {
    delete opengl_info_;
    delete session_statistic_;
  }
}

void TraceSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TraceSession::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TraceSession_descriptor_;
}

const TraceSession& TraceSession::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fbt_5fformat_2eproto();
  return *default_instance_;
}

TraceSession* TraceSession::default_instance_ = NULL;

TraceSession* TraceSession::New() const {
  return new TraceSession;
}

void TraceSession::Clear() {
  if (_has_bits_[0 / 32] & 23) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_opengl_info()) {
      if (opengl_info_ != NULL) opengl_info_->::fbt_format::OpenGLInfo::Clear();
    }
    if (has_local_time()) {
      if (local_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        local_time_->clear();
      }
    }
    if (has_session_statistic()) {
      if (session_statistic_ != NULL) session_statistic_->::fbt_format::TraceSession_SessionStatistic::Clear();
    }
  }
  stage_traces_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TraceSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fbt_format.TraceSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_opengl_info;
        break;
      }

      // required .fbt_format.OpenGLInfo opengl_info = 2;
      case 2: {
        if (tag == 18) {
         parse_opengl_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_opengl_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_local_time;
        break;
      }

      // required string local_time = 3;
      case 3: {
        if (tag == 26) {
         parse_local_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_local_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->local_time().data(), this->local_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "local_time");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_stage_traces;
        break;
      }

      // repeated .fbt_format.StageTrace stage_traces = 4;
      case 4: {
        if (tag == 34) {
         parse_stage_traces:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stage_traces()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_stage_traces;
        if (input->ExpectTag(42)) goto parse_session_statistic;
        break;
      }

      // optional .fbt_format.TraceSession.SessionStatistic session_statistic = 5;
      case 5: {
        if (tag == 42) {
         parse_session_statistic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session_statistic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fbt_format.TraceSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fbt_format.TraceSession)
  return false;
#undef DO_
}

void TraceSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fbt_format.TraceSession)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required .fbt_format.OpenGLInfo opengl_info = 2;
  if (has_opengl_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->opengl_info(), output);
  }

  // required string local_time = 3;
  if (has_local_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->local_time().data(), this->local_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "local_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->local_time(), output);
  }

  // repeated .fbt_format.StageTrace stage_traces = 4;
  for (int i = 0; i < this->stage_traces_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stage_traces(i), output);
  }

  // optional .fbt_format.TraceSession.SessionStatistic session_statistic = 5;
  if (has_session_statistic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->session_statistic(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fbt_format.TraceSession)
}

::google::protobuf::uint8* TraceSession::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fbt_format.TraceSession)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .fbt_format.OpenGLInfo opengl_info = 2;
  if (has_opengl_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->opengl_info(), target);
  }

  // required string local_time = 3;
  if (has_local_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->local_time().data(), this->local_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "local_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->local_time(), target);
  }

  // repeated .fbt_format.StageTrace stage_traces = 4;
  for (int i = 0; i < this->stage_traces_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->stage_traces(i), target);
  }

  // optional .fbt_format.TraceSession.SessionStatistic session_statistic = 5;
  if (has_session_statistic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->session_statistic(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fbt_format.TraceSession)
  return target;
}

int TraceSession::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .fbt_format.OpenGLInfo opengl_info = 2;
    if (has_opengl_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->opengl_info());
    }

    // required string local_time = 3;
    if (has_local_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->local_time());
    }

    // optional .fbt_format.TraceSession.SessionStatistic session_statistic = 5;
    if (has_session_statistic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session_statistic());
    }

  }
  // repeated .fbt_format.StageTrace stage_traces = 4;
  total_size += 1 * this->stage_traces_size();
  for (int i = 0; i < this->stage_traces_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stage_traces(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TraceSession::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TraceSession* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TraceSession*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TraceSession::MergeFrom(const TraceSession& from) {
  GOOGLE_CHECK_NE(&from, this);
  stage_traces_.MergeFrom(from.stage_traces_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_opengl_info()) {
      mutable_opengl_info()->::fbt_format::OpenGLInfo::MergeFrom(from.opengl_info());
    }
    if (from.has_local_time()) {
      set_local_time(from.local_time());
    }
    if (from.has_session_statistic()) {
      mutable_session_statistic()->::fbt_format::TraceSession_SessionStatistic::MergeFrom(from.session_statistic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TraceSession::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TraceSession::CopyFrom(const TraceSession& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceSession::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_opengl_info()) {
    if (!this->opengl_info().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->stage_traces())) return false;
  if (has_session_statistic()) {
    if (!this->session_statistic().IsInitialized()) return false;
  }
  return true;
}

void TraceSession::Swap(TraceSession* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(opengl_info_, other->opengl_info_);
    std::swap(local_time_, other->local_time_);
    stage_traces_.Swap(&other->stage_traces_);
    std::swap(session_statistic_, other->session_statistic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TraceSession::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TraceSession_descriptor_;
  metadata.reflection = TraceSession_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fbt_format

// @@protoc_insertion_point(global_scope)

#ifdef _MSC_VER
#pragma warning(pop)
#endif

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fbt_format.proto

#ifndef PROTOBUF_fbt_5fformat_2eproto__INCLUDED
#define PROTOBUF_fbt_5fformat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace fbt_format {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_fbt_5fformat_2eproto();
void protobuf_AssignDesc_fbt_5fformat_2eproto();
void protobuf_ShutdownFile_fbt_5fformat_2eproto();

class StageTrace;
class StageTrace_EventNameMapping;
class StageTrace_DeltaStatistic;
class StageTrace_EventTrace;
class OpenGLInfo;
class TraceSession;
class TraceSession_SessionStatistic;

enum StageTrace_EventType {
  StageTrace_EventType_EXECUTE_BEGIN = 1,
  StageTrace_EventType_INPUT_TOKEN_AVAILABLE = 2,
  StageTrace_EventType_OUTPUT_TOKEN_AVAILABLE = 3,
  StageTrace_EventType_TASK_BEGIN = 4,
  StageTrace_EventType_TASK_END = 5,
  StageTrace_EventType_EXECUTE_END = 6,
  StageTrace_EventType_GL_TASK_BEGIN = 7,
  StageTrace_EventType_GL_TASK_END = 8
};
bool StageTrace_EventType_IsValid(int value);
const StageTrace_EventType StageTrace_EventType_EventType_MIN = StageTrace_EventType_EXECUTE_BEGIN;
const StageTrace_EventType StageTrace_EventType_EventType_MAX = StageTrace_EventType_GL_TASK_END;
const int StageTrace_EventType_EventType_ARRAYSIZE = StageTrace_EventType_EventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* StageTrace_EventType_descriptor();
inline const ::std::string& StageTrace_EventType_Name(StageTrace_EventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    StageTrace_EventType_descriptor(), value);
}
inline bool StageTrace_EventType_Parse(
    const ::std::string& name, StageTrace_EventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StageTrace_EventType>(
    StageTrace_EventType_descriptor(), name, value);
}
// ===================================================================

class StageTrace_EventNameMapping : public ::google::protobuf::Message {
 public:
  StageTrace_EventNameMapping();
  virtual ~StageTrace_EventNameMapping();

  StageTrace_EventNameMapping(const StageTrace_EventNameMapping& from);

  inline StageTrace_EventNameMapping& operator=(const StageTrace_EventNameMapping& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StageTrace_EventNameMapping& default_instance();

  void Swap(StageTrace_EventNameMapping* other);

  // implements Message ----------------------------------------------

  StageTrace_EventNameMapping* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StageTrace_EventNameMapping& from);
  void MergeFrom(const StageTrace_EventNameMapping& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .fbt_format.StageTrace.EventType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::fbt_format::StageTrace_EventType type() const;
  inline void set_type(::fbt_format::StageTrace_EventType value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:fbt_format.StageTrace.EventNameMapping)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  int type_;
  friend void  protobuf_AddDesc_fbt_5fformat_2eproto();
  friend void protobuf_AssignDesc_fbt_5fformat_2eproto();
  friend void protobuf_ShutdownFile_fbt_5fformat_2eproto();

  void InitAsDefaultInstance();
  static StageTrace_EventNameMapping* default_instance_;
};
// -------------------------------------------------------------------

class StageTrace_DeltaStatistic : public ::google::protobuf::Message {
 public:
  StageTrace_DeltaStatistic();
  virtual ~StageTrace_DeltaStatistic();

  StageTrace_DeltaStatistic(const StageTrace_DeltaStatistic& from);

  inline StageTrace_DeltaStatistic& operator=(const StageTrace_DeltaStatistic& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StageTrace_DeltaStatistic& default_instance();

  void Swap(StageTrace_DeltaStatistic* other);

  // implements Message ----------------------------------------------

  StageTrace_DeltaStatistic* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StageTrace_DeltaStatistic& from);
  void MergeFrom(const StageTrace_DeltaStatistic& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required .fbt_format.StageTrace.EventType begin_event = 2;
  inline bool has_begin_event() const;
  inline void clear_begin_event();
  static const int kBeginEventFieldNumber = 2;
  inline ::fbt_format::StageTrace_EventType begin_event() const;
  inline void set_begin_event(::fbt_format::StageTrace_EventType value);

  // required .fbt_format.StageTrace.EventType end_event = 3;
  inline bool has_end_event() const;
  inline void clear_end_event();
  static const int kEndEventFieldNumber = 3;
  inline ::fbt_format::StageTrace_EventType end_event() const;
  inline void set_end_event(::fbt_format::StageTrace_EventType value);

  // required sint64 average_ns = 4;
  inline bool has_average_ns() const;
  inline void clear_average_ns();
  static const int kAverageNsFieldNumber = 4;
  inline ::google::protobuf::int64 average_ns() const;
  inline void set_average_ns(::google::protobuf::int64 value);

  // required sint64 minimum_ns = 5;
  inline bool has_minimum_ns() const;
  inline void clear_minimum_ns();
  static const int kMinimumNsFieldNumber = 5;
  inline ::google::protobuf::int64 minimum_ns() const;
  inline void set_minimum_ns(::google::protobuf::int64 value);

  // required sint64 maximum_ns = 6;
  inline bool has_maximum_ns() const;
  inline void clear_maximum_ns();
  static const int kMaximumNsFieldNumber = 6;
  inline ::google::protobuf::int64 maximum_ns() const;
  inline void set_maximum_ns(::google::protobuf::int64 value);

  // required sint64 std_deviation_ns = 7;
  inline bool has_std_deviation_ns() const;
  inline void clear_std_deviation_ns();
  static const int kStdDeviationNsFieldNumber = 7;
  inline ::google::protobuf::int64 std_deviation_ns() const;
  inline void set_std_deviation_ns(::google::protobuf::int64 value);

  // required sint64 median_ns = 8;
  inline bool has_median_ns() const;
  inline void clear_median_ns();
  static const int kMedianNsFieldNumber = 8;
  inline ::google::protobuf::int64 median_ns() const;
  inline void set_median_ns(::google::protobuf::int64 value);

  // required uint64 num_samples = 9;
  inline bool has_num_samples() const;
  inline void clear_num_samples();
  static const int kNumSamplesFieldNumber = 9;
  inline ::google::protobuf::uint64 num_samples() const;
  inline void set_num_samples(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:fbt_format.StageTrace.DeltaStatistic)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_begin_event();
  inline void clear_has_begin_event();
  inline void set_has_end_event();
  inline void clear_has_end_event();
  inline void set_has_average_ns();
  inline void clear_has_average_ns();
  inline void set_has_minimum_ns();
  inline void clear_has_minimum_ns();
  inline void set_has_maximum_ns();
  inline void clear_has_maximum_ns();
  inline void set_has_std_deviation_ns();
  inline void clear_has_std_deviation_ns();
  inline void set_has_median_ns();
  inline void clear_has_median_ns();
  inline void set_has_num_samples();
  inline void clear_has_num_samples();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  int begin_event_;
  int end_event_;
  ::google::protobuf::int64 average_ns_;
  ::google::protobuf::int64 minimum_ns_;
  ::google::protobuf::int64 maximum_ns_;
  ::google::protobuf::int64 std_deviation_ns_;
  ::google::protobuf::int64 median_ns_;
  ::google::protobuf::uint64 num_samples_;
  friend void  protobuf_AddDesc_fbt_5fformat_2eproto();
  friend void protobuf_AssignDesc_fbt_5fformat_2eproto();
  friend void protobuf_ShutdownFile_fbt_5fformat_2eproto();

  void InitAsDefaultInstance();
  static StageTrace_DeltaStatistic* default_instance_;
};
// -------------------------------------------------------------------

class StageTrace_EventTrace : public ::google::protobuf::Message {
 public:
  StageTrace_EventTrace();
  virtual ~StageTrace_EventTrace();

  StageTrace_EventTrace(const StageTrace_EventTrace& from);

  inline StageTrace_EventTrace& operator=(const StageTrace_EventTrace& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StageTrace_EventTrace& default_instance();

  void Swap(StageTrace_EventTrace* other);

  // implements Message ----------------------------------------------

  StageTrace_EventTrace* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StageTrace_EventTrace& from);
  void MergeFrom(const StageTrace_EventTrace& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .fbt_format.StageTrace.EventType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::fbt_format::StageTrace_EventType type() const;
  inline void set_type(::fbt_format::StageTrace_EventType value);

  // repeated sint64 trace_times_ns = 2 [packed = true];
  inline int trace_times_ns_size() const;
  inline void clear_trace_times_ns();
  static const int kTraceTimesNsFieldNumber = 2;
  inline ::google::protobuf::int64 trace_times_ns(int index) const;
  inline void set_trace_times_ns(int index, ::google::protobuf::int64 value);
  inline void add_trace_times_ns(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      trace_times_ns() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_trace_times_ns();

  // @@protoc_insertion_point(class_scope:fbt_format.StageTrace.EventTrace)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > trace_times_ns_;
  mutable int _trace_times_ns_cached_byte_size_;
  int type_;
  friend void  protobuf_AddDesc_fbt_5fformat_2eproto();
  friend void protobuf_AssignDesc_fbt_5fformat_2eproto();
  friend void protobuf_ShutdownFile_fbt_5fformat_2eproto();

  void InitAsDefaultInstance();
  static StageTrace_EventTrace* default_instance_;
};
// -------------------------------------------------------------------

class StageTrace : public ::google::protobuf::Message {
 public:
  StageTrace();
  virtual ~StageTrace();

  StageTrace(const StageTrace& from);

  inline StageTrace& operator=(const StageTrace& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StageTrace& default_instance();

  void Swap(StageTrace* other);

  // implements Message ----------------------------------------------

  StageTrace* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StageTrace& from);
  void MergeFrom(const StageTrace& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef StageTrace_EventNameMapping EventNameMapping;
  typedef StageTrace_DeltaStatistic DeltaStatistic;
  typedef StageTrace_EventTrace EventTrace;

  typedef StageTrace_EventType EventType;
  static const EventType EXECUTE_BEGIN = StageTrace_EventType_EXECUTE_BEGIN;
  static const EventType INPUT_TOKEN_AVAILABLE = StageTrace_EventType_INPUT_TOKEN_AVAILABLE;
  static const EventType OUTPUT_TOKEN_AVAILABLE = StageTrace_EventType_OUTPUT_TOKEN_AVAILABLE;
  static const EventType TASK_BEGIN = StageTrace_EventType_TASK_BEGIN;
  static const EventType TASK_END = StageTrace_EventType_TASK_END;
  static const EventType EXECUTE_END = StageTrace_EventType_EXECUTE_END;
  static const EventType GL_TASK_BEGIN = StageTrace_EventType_GL_TASK_BEGIN;
  static const EventType GL_TASK_END = StageTrace_EventType_GL_TASK_END;
  static inline bool EventType_IsValid(int value) {
    return StageTrace_EventType_IsValid(value);
  }
  static const EventType EventType_MIN =
    StageTrace_EventType_EventType_MIN;
  static const EventType EventType_MAX =
    StageTrace_EventType_EventType_MAX;
  static const int EventType_ARRAYSIZE =
    StageTrace_EventType_EventType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EventType_descriptor() {
    return StageTrace_EventType_descriptor();
  }
  static inline const ::std::string& EventType_Name(EventType value) {
    return StageTrace_EventType_Name(value);
  }
  static inline bool EventType_Parse(const ::std::string& name,
      EventType* value) {
    return StageTrace_EventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .fbt_format.StageTrace.EventTrace event_traces = 2;
  inline int event_traces_size() const;
  inline void clear_event_traces();
  static const int kEventTracesFieldNumber = 2;
  inline const ::fbt_format::StageTrace_EventTrace& event_traces(int index) const;
  inline ::fbt_format::StageTrace_EventTrace* mutable_event_traces(int index);
  inline ::fbt_format::StageTrace_EventTrace* add_event_traces();
  inline const ::google::protobuf::RepeatedPtrField< ::fbt_format::StageTrace_EventTrace >&
      event_traces() const;
  inline ::google::protobuf::RepeatedPtrField< ::fbt_format::StageTrace_EventTrace >*
      mutable_event_traces();

  // repeated .fbt_format.StageTrace.EventNameMapping name_overrides = 3;
  inline int name_overrides_size() const;
  inline void clear_name_overrides();
  static const int kNameOverridesFieldNumber = 3;
  inline const ::fbt_format::StageTrace_EventNameMapping& name_overrides(int index) const;
  inline ::fbt_format::StageTrace_EventNameMapping* mutable_name_overrides(int index);
  inline ::fbt_format::StageTrace_EventNameMapping* add_name_overrides();
  inline const ::google::protobuf::RepeatedPtrField< ::fbt_format::StageTrace_EventNameMapping >&
      name_overrides() const;
  inline ::google::protobuf::RepeatedPtrField< ::fbt_format::StageTrace_EventNameMapping >*
      mutable_name_overrides();

  // repeated .fbt_format.StageTrace.DeltaStatistic delta_statistics = 4;
  inline int delta_statistics_size() const;
  inline void clear_delta_statistics();
  static const int kDeltaStatisticsFieldNumber = 4;
  inline const ::fbt_format::StageTrace_DeltaStatistic& delta_statistics(int index) const;
  inline ::fbt_format::StageTrace_DeltaStatistic* mutable_delta_statistics(int index);
  inline ::fbt_format::StageTrace_DeltaStatistic* add_delta_statistics();
  inline const ::google::protobuf::RepeatedPtrField< ::fbt_format::StageTrace_DeltaStatistic >&
      delta_statistics() const;
  inline ::google::protobuf::RepeatedPtrField< ::fbt_format::StageTrace_DeltaStatistic >*
      mutable_delta_statistics();

  // @@protoc_insertion_point(class_scope:fbt_format.StageTrace)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::fbt_format::StageTrace_EventTrace > event_traces_;
  ::google::protobuf::RepeatedPtrField< ::fbt_format::StageTrace_EventNameMapping > name_overrides_;
  ::google::protobuf::RepeatedPtrField< ::fbt_format::StageTrace_DeltaStatistic > delta_statistics_;
  friend void  protobuf_AddDesc_fbt_5fformat_2eproto();
  friend void protobuf_AssignDesc_fbt_5fformat_2eproto();
  friend void protobuf_ShutdownFile_fbt_5fformat_2eproto();

  void InitAsDefaultInstance();
  static StageTrace* default_instance_;
};
// -------------------------------------------------------------------

class OpenGLInfo : public ::google::protobuf::Message {
 public:
  OpenGLInfo();
  virtual ~OpenGLInfo();

  OpenGLInfo(const OpenGLInfo& from);

  inline OpenGLInfo& operator=(const OpenGLInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenGLInfo& default_instance();

  void Swap(OpenGLInfo* other);

  // implements Message ----------------------------------------------

  OpenGLInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpenGLInfo& from);
  void MergeFrom(const OpenGLInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string vendor = 1;
  inline bool has_vendor() const;
  inline void clear_vendor();
  static const int kVendorFieldNumber = 1;
  inline const ::std::string& vendor() const;
  inline void set_vendor(const ::std::string& value);
  inline void set_vendor(const char* value);
  inline void set_vendor(const char* value, size_t size);
  inline ::std::string* mutable_vendor();
  inline ::std::string* release_vendor();
  inline void set_allocated_vendor(::std::string* vendor);

  // required string renderer = 2;
  inline bool has_renderer() const;
  inline void clear_renderer();
  static const int kRendererFieldNumber = 2;
  inline const ::std::string& renderer() const;
  inline void set_renderer(const ::std::string& value);
  inline void set_renderer(const char* value);
  inline void set_renderer(const char* value, size_t size);
  inline ::std::string* mutable_renderer();
  inline ::std::string* release_renderer();
  inline void set_allocated_renderer(::std::string* renderer);

  // required string version = 3;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 3;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // @@protoc_insertion_point(class_scope:fbt_format.OpenGLInfo)
 private:
  inline void set_has_vendor();
  inline void clear_has_vendor();
  inline void set_has_renderer();
  inline void clear_has_renderer();
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* vendor_;
  ::std::string* renderer_;
  ::std::string* version_;
  friend void  protobuf_AddDesc_fbt_5fformat_2eproto();
  friend void protobuf_AssignDesc_fbt_5fformat_2eproto();
  friend void protobuf_ShutdownFile_fbt_5fformat_2eproto();

  void InitAsDefaultInstance();
  static OpenGLInfo* default_instance_;
};
// -------------------------------------------------------------------

class TraceSession_SessionStatistic : public ::google::protobuf::Message {
 public:
  TraceSession_SessionStatistic();
  virtual ~TraceSession_SessionStatistic();

  TraceSession_SessionStatistic(const TraceSession_SessionStatistic& from);

  inline TraceSession_SessionStatistic& operator=(const TraceSession_SessionStatistic& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TraceSession_SessionStatistic& default_instance();

  void Swap(TraceSession_SessionStatistic* other);

  // implements Message ----------------------------------------------

  TraceSession_SessionStatistic* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TraceSession_SessionStatistic& from);
  void MergeFrom(const TraceSession_SessionStatistic& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 number_of_frames_processed = 1;
  inline bool has_number_of_frames_processed() const;
  inline void clear_number_of_frames_processed();
  static const int kNumberOfFramesProcessedFieldNumber = 1;
  inline ::google::protobuf::uint64 number_of_frames_processed() const;
  inline void set_number_of_frames_processed(::google::protobuf::uint64 value);

  // required float avg_throughput_mb_per_sec = 2;
  inline bool has_avg_throughput_mb_per_sec() const;
  inline void clear_avg_throughput_mb_per_sec();
  static const int kAvgThroughputMbPerSecFieldNumber = 2;
  inline float avg_throughput_mb_per_sec() const;
  inline void set_avg_throughput_mb_per_sec(float value);

  // required sint64 med_frame_processing_time_per_frame_ns = 3;
  inline bool has_med_frame_processing_time_per_frame_ns() const;
  inline void clear_med_frame_processing_time_per_frame_ns();
  static const int kMedFrameProcessingTimePerFrameNsFieldNumber = 3;
  inline ::google::protobuf::int64 med_frame_processing_time_per_frame_ns() const;
  inline void set_med_frame_processing_time_per_frame_ns(::google::protobuf::int64 value);

  // optional float avg_millisecs_per_frame = 4;
  inline bool has_avg_millisecs_per_frame() const;
  inline void clear_avg_millisecs_per_frame();
  static const int kAvgMillisecsPerFrameFieldNumber = 4;
  inline float avg_millisecs_per_frame() const;
  inline void set_avg_millisecs_per_frame(float value);

  // @@protoc_insertion_point(class_scope:fbt_format.TraceSession.SessionStatistic)
 private:
  inline void set_has_number_of_frames_processed();
  inline void clear_has_number_of_frames_processed();
  inline void set_has_avg_throughput_mb_per_sec();
  inline void clear_has_avg_throughput_mb_per_sec();
  inline void set_has_med_frame_processing_time_per_frame_ns();
  inline void clear_has_med_frame_processing_time_per_frame_ns();
  inline void set_has_avg_millisecs_per_frame();
  inline void clear_has_avg_millisecs_per_frame();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 number_of_frames_processed_;
  ::google::protobuf::int64 med_frame_processing_time_per_frame_ns_;
  float avg_throughput_mb_per_sec_;
  float avg_millisecs_per_frame_;
  friend void  protobuf_AddDesc_fbt_5fformat_2eproto();
  friend void protobuf_AssignDesc_fbt_5fformat_2eproto();
  friend void protobuf_ShutdownFile_fbt_5fformat_2eproto();

  void InitAsDefaultInstance();
  static TraceSession_SessionStatistic* default_instance_;
};
// -------------------------------------------------------------------

class TraceSession : public ::google::protobuf::Message {
 public:
  TraceSession();
  virtual ~TraceSession();

  TraceSession(const TraceSession& from);

  inline TraceSession& operator=(const TraceSession& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TraceSession& default_instance();

  void Swap(TraceSession* other);

  // implements Message ----------------------------------------------

  TraceSession* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TraceSession& from);
  void MergeFrom(const TraceSession& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TraceSession_SessionStatistic SessionStatistic;

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required .fbt_format.OpenGLInfo opengl_info = 2;
  inline bool has_opengl_info() const;
  inline void clear_opengl_info();
  static const int kOpenglInfoFieldNumber = 2;
  inline const ::fbt_format::OpenGLInfo& opengl_info() const;
  inline ::fbt_format::OpenGLInfo* mutable_opengl_info();
  inline ::fbt_format::OpenGLInfo* release_opengl_info();
  inline void set_allocated_opengl_info(::fbt_format::OpenGLInfo* opengl_info);

  // required string local_time = 3;
  inline bool has_local_time() const;
  inline void clear_local_time();
  static const int kLocalTimeFieldNumber = 3;
  inline const ::std::string& local_time() const;
  inline void set_local_time(const ::std::string& value);
  inline void set_local_time(const char* value);
  inline void set_local_time(const char* value, size_t size);
  inline ::std::string* mutable_local_time();
  inline ::std::string* release_local_time();
  inline void set_allocated_local_time(::std::string* local_time);

  // repeated .fbt_format.StageTrace stage_traces = 4;
  inline int stage_traces_size() const;
  inline void clear_stage_traces();
  static const int kStageTracesFieldNumber = 4;
  inline const ::fbt_format::StageTrace& stage_traces(int index) const;
  inline ::fbt_format::StageTrace* mutable_stage_traces(int index);
  inline ::fbt_format::StageTrace* add_stage_traces();
  inline const ::google::protobuf::RepeatedPtrField< ::fbt_format::StageTrace >&
      stage_traces() const;
  inline ::google::protobuf::RepeatedPtrField< ::fbt_format::StageTrace >*
      mutable_stage_traces();

  // optional .fbt_format.TraceSession.SessionStatistic session_statistic = 5;
  inline bool has_session_statistic() const;
  inline void clear_session_statistic();
  static const int kSessionStatisticFieldNumber = 5;
  inline const ::fbt_format::TraceSession_SessionStatistic& session_statistic() const;
  inline ::fbt_format::TraceSession_SessionStatistic* mutable_session_statistic();
  inline ::fbt_format::TraceSession_SessionStatistic* release_session_statistic();
  inline void set_allocated_session_statistic(::fbt_format::TraceSession_SessionStatistic* session_statistic);

  // @@protoc_insertion_point(class_scope:fbt_format.TraceSession)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_opengl_info();
  inline void clear_has_opengl_info();
  inline void set_has_local_time();
  inline void clear_has_local_time();
  inline void set_has_session_statistic();
  inline void clear_has_session_statistic();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::fbt_format::OpenGLInfo* opengl_info_;
  ::std::string* local_time_;
  ::google::protobuf::RepeatedPtrField< ::fbt_format::StageTrace > stage_traces_;
  ::fbt_format::TraceSession_SessionStatistic* session_statistic_;
  friend void  protobuf_AddDesc_fbt_5fformat_2eproto();
  friend void protobuf_AssignDesc_fbt_5fformat_2eproto();
  friend void protobuf_ShutdownFile_fbt_5fformat_2eproto();

  void InitAsDefaultInstance();
  static TraceSession* default_instance_;
};
// ===================================================================


// ===================================================================

// StageTrace_EventNameMapping

// required .fbt_format.StageTrace.EventType type = 1;
inline bool StageTrace_EventNameMapping::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StageTrace_EventNameMapping::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StageTrace_EventNameMapping::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StageTrace_EventNameMapping::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::fbt_format::StageTrace_EventType StageTrace_EventNameMapping::type() const {
  // @@protoc_insertion_point(field_get:fbt_format.StageTrace.EventNameMapping.type)
  return static_cast< ::fbt_format::StageTrace_EventType >(type_);
}
inline void StageTrace_EventNameMapping::set_type(::fbt_format::StageTrace_EventType value) {
  assert(::fbt_format::StageTrace_EventType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:fbt_format.StageTrace.EventNameMapping.type)
}

// required string name = 2;
inline bool StageTrace_EventNameMapping::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StageTrace_EventNameMapping::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StageTrace_EventNameMapping::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StageTrace_EventNameMapping::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& StageTrace_EventNameMapping::name() const {
  // @@protoc_insertion_point(field_get:fbt_format.StageTrace.EventNameMapping.name)
  return *name_;
}
inline void StageTrace_EventNameMapping::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:fbt_format.StageTrace.EventNameMapping.name)
}
inline void StageTrace_EventNameMapping::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:fbt_format.StageTrace.EventNameMapping.name)
}
inline void StageTrace_EventNameMapping::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fbt_format.StageTrace.EventNameMapping.name)
}
inline ::std::string* StageTrace_EventNameMapping::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:fbt_format.StageTrace.EventNameMapping.name)
  return name_;
}
inline ::std::string* StageTrace_EventNameMapping::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StageTrace_EventNameMapping::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:fbt_format.StageTrace.EventNameMapping.name)
}

// -------------------------------------------------------------------

// StageTrace_DeltaStatistic

// required string name = 1;
inline bool StageTrace_DeltaStatistic::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StageTrace_DeltaStatistic::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StageTrace_DeltaStatistic::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StageTrace_DeltaStatistic::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& StageTrace_DeltaStatistic::name() const {
  // @@protoc_insertion_point(field_get:fbt_format.StageTrace.DeltaStatistic.name)
  return *name_;
}
inline void StageTrace_DeltaStatistic::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:fbt_format.StageTrace.DeltaStatistic.name)
}
inline void StageTrace_DeltaStatistic::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:fbt_format.StageTrace.DeltaStatistic.name)
}
inline void StageTrace_DeltaStatistic::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fbt_format.StageTrace.DeltaStatistic.name)
}
inline ::std::string* StageTrace_DeltaStatistic::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:fbt_format.StageTrace.DeltaStatistic.name)
  return name_;
}
inline ::std::string* StageTrace_DeltaStatistic::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StageTrace_DeltaStatistic::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:fbt_format.StageTrace.DeltaStatistic.name)
}

// required .fbt_format.StageTrace.EventType begin_event = 2;
inline bool StageTrace_DeltaStatistic::has_begin_event() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StageTrace_DeltaStatistic::set_has_begin_event() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StageTrace_DeltaStatistic::clear_has_begin_event() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StageTrace_DeltaStatistic::clear_begin_event() {
  begin_event_ = 1;
  clear_has_begin_event();
}
inline ::fbt_format::StageTrace_EventType StageTrace_DeltaStatistic::begin_event() const {
  // @@protoc_insertion_point(field_get:fbt_format.StageTrace.DeltaStatistic.begin_event)
  return static_cast< ::fbt_format::StageTrace_EventType >(begin_event_);
}
inline void StageTrace_DeltaStatistic::set_begin_event(::fbt_format::StageTrace_EventType value) {
  assert(::fbt_format::StageTrace_EventType_IsValid(value));
  set_has_begin_event();
  begin_event_ = value;
  // @@protoc_insertion_point(field_set:fbt_format.StageTrace.DeltaStatistic.begin_event)
}

// required .fbt_format.StageTrace.EventType end_event = 3;
inline bool StageTrace_DeltaStatistic::has_end_event() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StageTrace_DeltaStatistic::set_has_end_event() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StageTrace_DeltaStatistic::clear_has_end_event() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StageTrace_DeltaStatistic::clear_end_event() {
  end_event_ = 1;
  clear_has_end_event();
}
inline ::fbt_format::StageTrace_EventType StageTrace_DeltaStatistic::end_event() const {
  // @@protoc_insertion_point(field_get:fbt_format.StageTrace.DeltaStatistic.end_event)
  return static_cast< ::fbt_format::StageTrace_EventType >(end_event_);
}
inline void StageTrace_DeltaStatistic::set_end_event(::fbt_format::StageTrace_EventType value) {
  assert(::fbt_format::StageTrace_EventType_IsValid(value));
  set_has_end_event();
  end_event_ = value;
  // @@protoc_insertion_point(field_set:fbt_format.StageTrace.DeltaStatistic.end_event)
}

// required sint64 average_ns = 4;
inline bool StageTrace_DeltaStatistic::has_average_ns() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StageTrace_DeltaStatistic::set_has_average_ns() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StageTrace_DeltaStatistic::clear_has_average_ns() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StageTrace_DeltaStatistic::clear_average_ns() {
  average_ns_ = GOOGLE_LONGLONG(0);
  clear_has_average_ns();
}
inline ::google::protobuf::int64 StageTrace_DeltaStatistic::average_ns() const {
  // @@protoc_insertion_point(field_get:fbt_format.StageTrace.DeltaStatistic.average_ns)
  return average_ns_;
}
inline void StageTrace_DeltaStatistic::set_average_ns(::google::protobuf::int64 value) {
  set_has_average_ns();
  average_ns_ = value;
  // @@protoc_insertion_point(field_set:fbt_format.StageTrace.DeltaStatistic.average_ns)
}

// required sint64 minimum_ns = 5;
inline bool StageTrace_DeltaStatistic::has_minimum_ns() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StageTrace_DeltaStatistic::set_has_minimum_ns() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StageTrace_DeltaStatistic::clear_has_minimum_ns() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StageTrace_DeltaStatistic::clear_minimum_ns() {
  minimum_ns_ = GOOGLE_LONGLONG(0);
  clear_has_minimum_ns();
}
inline ::google::protobuf::int64 StageTrace_DeltaStatistic::minimum_ns() const {
  // @@protoc_insertion_point(field_get:fbt_format.StageTrace.DeltaStatistic.minimum_ns)
  return minimum_ns_;
}
inline void StageTrace_DeltaStatistic::set_minimum_ns(::google::protobuf::int64 value) {
  set_has_minimum_ns();
  minimum_ns_ = value;
  // @@protoc_insertion_point(field_set:fbt_format.StageTrace.DeltaStatistic.minimum_ns)
}

// required sint64 maximum_ns = 6;
inline bool StageTrace_DeltaStatistic::has_maximum_ns() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StageTrace_DeltaStatistic::set_has_maximum_ns() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StageTrace_DeltaStatistic::clear_has_maximum_ns() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StageTrace_DeltaStatistic::clear_maximum_ns() {
  maximum_ns_ = GOOGLE_LONGLONG(0);
  clear_has_maximum_ns();
}
inline ::google::protobuf::int64 StageTrace_DeltaStatistic::maximum_ns() const {
  // @@protoc_insertion_point(field_get:fbt_format.StageTrace.DeltaStatistic.maximum_ns)
  return maximum_ns_;
}
inline void StageTrace_DeltaStatistic::set_maximum_ns(::google::protobuf::int64 value) {
  set_has_maximum_ns();
  maximum_ns_ = value;
  // @@protoc_insertion_point(field_set:fbt_format.StageTrace.DeltaStatistic.maximum_ns)
}

// required sint64 std_deviation_ns = 7;
inline bool StageTrace_DeltaStatistic::has_std_deviation_ns() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StageTrace_DeltaStatistic::set_has_std_deviation_ns() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StageTrace_DeltaStatistic::clear_has_std_deviation_ns() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StageTrace_DeltaStatistic::clear_std_deviation_ns() {
  std_deviation_ns_ = GOOGLE_LONGLONG(0);
  clear_has_std_deviation_ns();
}
inline ::google::protobuf::int64 StageTrace_DeltaStatistic::std_deviation_ns() const {
  // @@protoc_insertion_point(field_get:fbt_format.StageTrace.DeltaStatistic.std_deviation_ns)
  return std_deviation_ns_;
}
inline void StageTrace_DeltaStatistic::set_std_deviation_ns(::google::protobuf::int64 value) {
  set_has_std_deviation_ns();
  std_deviation_ns_ = value;
  // @@protoc_insertion_point(field_set:fbt_format.StageTrace.DeltaStatistic.std_deviation_ns)
}

// required sint64 median_ns = 8;
inline bool StageTrace_DeltaStatistic::has_median_ns() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void StageTrace_DeltaStatistic::set_has_median_ns() {
  _has_bits_[0] |= 0x00000080u;
}
inline void StageTrace_DeltaStatistic::clear_has_median_ns() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void StageTrace_DeltaStatistic::clear_median_ns() {
  median_ns_ = GOOGLE_LONGLONG(0);
  clear_has_median_ns();
}
inline ::google::protobuf::int64 StageTrace_DeltaStatistic::median_ns() const {
  // @@protoc_insertion_point(field_get:fbt_format.StageTrace.DeltaStatistic.median_ns)
  return median_ns_;
}
inline void StageTrace_DeltaStatistic::set_median_ns(::google::protobuf::int64 value) {
  set_has_median_ns();
  median_ns_ = value;
  // @@protoc_insertion_point(field_set:fbt_format.StageTrace.DeltaStatistic.median_ns)
}

// required uint64 num_samples = 9;
inline bool StageTrace_DeltaStatistic::has_num_samples() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void StageTrace_DeltaStatistic::set_has_num_samples() {
  _has_bits_[0] |= 0x00000100u;
}
inline void StageTrace_DeltaStatistic::clear_has_num_samples() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void StageTrace_DeltaStatistic::clear_num_samples() {
  num_samples_ = GOOGLE_ULONGLONG(0);
  clear_has_num_samples();
}
inline ::google::protobuf::uint64 StageTrace_DeltaStatistic::num_samples() const {
  // @@protoc_insertion_point(field_get:fbt_format.StageTrace.DeltaStatistic.num_samples)
  return num_samples_;
}
inline void StageTrace_DeltaStatistic::set_num_samples(::google::protobuf::uint64 value) {
  set_has_num_samples();
  num_samples_ = value;
  // @@protoc_insertion_point(field_set:fbt_format.StageTrace.DeltaStatistic.num_samples)
}

// -------------------------------------------------------------------

// StageTrace_EventTrace

// required .fbt_format.StageTrace.EventType type = 1;
inline bool StageTrace_EventTrace::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StageTrace_EventTrace::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StageTrace_EventTrace::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StageTrace_EventTrace::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::fbt_format::StageTrace_EventType StageTrace_EventTrace::type() const {
  // @@protoc_insertion_point(field_get:fbt_format.StageTrace.EventTrace.type)
  return static_cast< ::fbt_format::StageTrace_EventType >(type_);
}
inline void StageTrace_EventTrace::set_type(::fbt_format::StageTrace_EventType value) {
  assert(::fbt_format::StageTrace_EventType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:fbt_format.StageTrace.EventTrace.type)
}

// repeated sint64 trace_times_ns = 2 [packed = true];
inline int StageTrace_EventTrace::trace_times_ns_size() const {
  return trace_times_ns_.size();
}
inline void StageTrace_EventTrace::clear_trace_times_ns() {
  trace_times_ns_.Clear();
}
inline ::google::protobuf::int64 StageTrace_EventTrace::trace_times_ns(int index) const {
  // @@protoc_insertion_point(field_get:fbt_format.StageTrace.EventTrace.trace_times_ns)
  return trace_times_ns_.Get(index);
}
inline void StageTrace_EventTrace::set_trace_times_ns(int index, ::google::protobuf::int64 value) {
  trace_times_ns_.Set(index, value);
  // @@protoc_insertion_point(field_set:fbt_format.StageTrace.EventTrace.trace_times_ns)
}
inline void StageTrace_EventTrace::add_trace_times_ns(::google::protobuf::int64 value) {
  trace_times_ns_.Add(value);
  // @@protoc_insertion_point(field_add:fbt_format.StageTrace.EventTrace.trace_times_ns)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
StageTrace_EventTrace::trace_times_ns() const {
  // @@protoc_insertion_point(field_list:fbt_format.StageTrace.EventTrace.trace_times_ns)
  return trace_times_ns_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
StageTrace_EventTrace::mutable_trace_times_ns() {
  // @@protoc_insertion_point(field_mutable_list:fbt_format.StageTrace.EventTrace.trace_times_ns)
  return &trace_times_ns_;
}

// -------------------------------------------------------------------

// StageTrace

// required string name = 1;
inline bool StageTrace::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StageTrace::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StageTrace::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StageTrace::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& StageTrace::name() const {
  // @@protoc_insertion_point(field_get:fbt_format.StageTrace.name)
  return *name_;
}
inline void StageTrace::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:fbt_format.StageTrace.name)
}
inline void StageTrace::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:fbt_format.StageTrace.name)
}
inline void StageTrace::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fbt_format.StageTrace.name)
}
inline ::std::string* StageTrace::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:fbt_format.StageTrace.name)
  return name_;
}
inline ::std::string* StageTrace::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StageTrace::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:fbt_format.StageTrace.name)
}

// repeated .fbt_format.StageTrace.EventTrace event_traces = 2;
inline int StageTrace::event_traces_size() const {
  return event_traces_.size();
}
inline void StageTrace::clear_event_traces() {
  event_traces_.Clear();
}
inline const ::fbt_format::StageTrace_EventTrace& StageTrace::event_traces(int index) const {
  // @@protoc_insertion_point(field_get:fbt_format.StageTrace.event_traces)
  return event_traces_.Get(index);
}
inline ::fbt_format::StageTrace_EventTrace* StageTrace::mutable_event_traces(int index) {
  // @@protoc_insertion_point(field_mutable:fbt_format.StageTrace.event_traces)
  return event_traces_.Mutable(index);
}
inline ::fbt_format::StageTrace_EventTrace* StageTrace::add_event_traces() {
  // @@protoc_insertion_point(field_add:fbt_format.StageTrace.event_traces)
  return event_traces_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fbt_format::StageTrace_EventTrace >&
StageTrace::event_traces() const {
  // @@protoc_insertion_point(field_list:fbt_format.StageTrace.event_traces)
  return event_traces_;
}
inline ::google::protobuf::RepeatedPtrField< ::fbt_format::StageTrace_EventTrace >*
StageTrace::mutable_event_traces() {
  // @@protoc_insertion_point(field_mutable_list:fbt_format.StageTrace.event_traces)
  return &event_traces_;
}

// repeated .fbt_format.StageTrace.EventNameMapping name_overrides = 3;
inline int StageTrace::name_overrides_size() const {
  return name_overrides_.size();
}
inline void StageTrace::clear_name_overrides() {
  name_overrides_.Clear();
}
inline const ::fbt_format::StageTrace_EventNameMapping& StageTrace::name_overrides(int index) const {
  // @@protoc_insertion_point(field_get:fbt_format.StageTrace.name_overrides)
  return name_overrides_.Get(index);
}
inline ::fbt_format::StageTrace_EventNameMapping* StageTrace::mutable_name_overrides(int index) {
  // @@protoc_insertion_point(field_mutable:fbt_format.StageTrace.name_overrides)
  return name_overrides_.Mutable(index);
}
inline ::fbt_format::StageTrace_EventNameMapping* StageTrace::add_name_overrides() {
  // @@protoc_insertion_point(field_add:fbt_format.StageTrace.name_overrides)
  return name_overrides_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fbt_format::StageTrace_EventNameMapping >&
StageTrace::name_overrides() const {
  // @@protoc_insertion_point(field_list:fbt_format.StageTrace.name_overrides)
  return name_overrides_;
}
inline ::google::protobuf::RepeatedPtrField< ::fbt_format::StageTrace_EventNameMapping >*
StageTrace::mutable_name_overrides() {
  // @@protoc_insertion_point(field_mutable_list:fbt_format.StageTrace.name_overrides)
  return &name_overrides_;
}

// repeated .fbt_format.StageTrace.DeltaStatistic delta_statistics = 4;
inline int StageTrace::delta_statistics_size() const {
  return delta_statistics_.size();
}
inline void StageTrace::clear_delta_statistics() {
  delta_statistics_.Clear();
}
inline const ::fbt_format::StageTrace_DeltaStatistic& StageTrace::delta_statistics(int index) const {
  // @@protoc_insertion_point(field_get:fbt_format.StageTrace.delta_statistics)
  return delta_statistics_.Get(index);
}
inline ::fbt_format::StageTrace_DeltaStatistic* StageTrace::mutable_delta_statistics(int index) {
  // @@protoc_insertion_point(field_mutable:fbt_format.StageTrace.delta_statistics)
  return delta_statistics_.Mutable(index);
}
inline ::fbt_format::StageTrace_DeltaStatistic* StageTrace::add_delta_statistics() {
  // @@protoc_insertion_point(field_add:fbt_format.StageTrace.delta_statistics)
  return delta_statistics_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fbt_format::StageTrace_DeltaStatistic >&
StageTrace::delta_statistics() const {
  // @@protoc_insertion_point(field_list:fbt_format.StageTrace.delta_statistics)
  return delta_statistics_;
}
inline ::google::protobuf::RepeatedPtrField< ::fbt_format::StageTrace_DeltaStatistic >*
StageTrace::mutable_delta_statistics() {
  // @@protoc_insertion_point(field_mutable_list:fbt_format.StageTrace.delta_statistics)
  return &delta_statistics_;
}

// -------------------------------------------------------------------

// OpenGLInfo

// required string vendor = 1;
inline bool OpenGLInfo::has_vendor() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OpenGLInfo::set_has_vendor() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OpenGLInfo::clear_has_vendor() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OpenGLInfo::clear_vendor() {
  if (vendor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vendor_->clear();
  }
  clear_has_vendor();
}
inline const ::std::string& OpenGLInfo::vendor() const {
  // @@protoc_insertion_point(field_get:fbt_format.OpenGLInfo.vendor)
  return *vendor_;
}
inline void OpenGLInfo::set_vendor(const ::std::string& value) {
  set_has_vendor();
  if (vendor_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vendor_ = new ::std::string;
  }
  vendor_->assign(value);
  // @@protoc_insertion_point(field_set:fbt_format.OpenGLInfo.vendor)
}
inline void OpenGLInfo::set_vendor(const char* value) {
  set_has_vendor();
  if (vendor_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vendor_ = new ::std::string;
  }
  vendor_->assign(value);
  // @@protoc_insertion_point(field_set_char:fbt_format.OpenGLInfo.vendor)
}
inline void OpenGLInfo::set_vendor(const char* value, size_t size) {
  set_has_vendor();
  if (vendor_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vendor_ = new ::std::string;
  }
  vendor_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fbt_format.OpenGLInfo.vendor)
}
inline ::std::string* OpenGLInfo::mutable_vendor() {
  set_has_vendor();
  if (vendor_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vendor_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:fbt_format.OpenGLInfo.vendor)
  return vendor_;
}
inline ::std::string* OpenGLInfo::release_vendor() {
  clear_has_vendor();
  if (vendor_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = vendor_;
    vendor_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void OpenGLInfo::set_allocated_vendor(::std::string* vendor) {
  if (vendor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vendor_;
  }
  if (vendor) {
    set_has_vendor();
    vendor_ = vendor;
  } else {
    clear_has_vendor();
    vendor_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:fbt_format.OpenGLInfo.vendor)
}

// required string renderer = 2;
inline bool OpenGLInfo::has_renderer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OpenGLInfo::set_has_renderer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OpenGLInfo::clear_has_renderer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OpenGLInfo::clear_renderer() {
  if (renderer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    renderer_->clear();
  }
  clear_has_renderer();
}
inline const ::std::string& OpenGLInfo::renderer() const {
  // @@protoc_insertion_point(field_get:fbt_format.OpenGLInfo.renderer)
  return *renderer_;
}
inline void OpenGLInfo::set_renderer(const ::std::string& value) {
  set_has_renderer();
  if (renderer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    renderer_ = new ::std::string;
  }
  renderer_->assign(value);
  // @@protoc_insertion_point(field_set:fbt_format.OpenGLInfo.renderer)
}
inline void OpenGLInfo::set_renderer(const char* value) {
  set_has_renderer();
  if (renderer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    renderer_ = new ::std::string;
  }
  renderer_->assign(value);
  // @@protoc_insertion_point(field_set_char:fbt_format.OpenGLInfo.renderer)
}
inline void OpenGLInfo::set_renderer(const char* value, size_t size) {
  set_has_renderer();
  if (renderer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    renderer_ = new ::std::string;
  }
  renderer_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fbt_format.OpenGLInfo.renderer)
}
inline ::std::string* OpenGLInfo::mutable_renderer() {
  set_has_renderer();
  if (renderer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    renderer_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:fbt_format.OpenGLInfo.renderer)
  return renderer_;
}
inline ::std::string* OpenGLInfo::release_renderer() {
  clear_has_renderer();
  if (renderer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = renderer_;
    renderer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void OpenGLInfo::set_allocated_renderer(::std::string* renderer) {
  if (renderer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete renderer_;
  }
  if (renderer) {
    set_has_renderer();
    renderer_ = renderer;
  } else {
    clear_has_renderer();
    renderer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:fbt_format.OpenGLInfo.renderer)
}

// required string version = 3;
inline bool OpenGLInfo::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OpenGLInfo::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OpenGLInfo::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OpenGLInfo::clear_version() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& OpenGLInfo::version() const {
  // @@protoc_insertion_point(field_get:fbt_format.OpenGLInfo.version)
  return *version_;
}
inline void OpenGLInfo::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set:fbt_format.OpenGLInfo.version)
}
inline void OpenGLInfo::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set_char:fbt_format.OpenGLInfo.version)
}
inline void OpenGLInfo::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fbt_format.OpenGLInfo.version)
}
inline ::std::string* OpenGLInfo::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:fbt_format.OpenGLInfo.version)
  return version_;
}
inline ::std::string* OpenGLInfo::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void OpenGLInfo::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:fbt_format.OpenGLInfo.version)
}

// -------------------------------------------------------------------

// TraceSession_SessionStatistic

// required uint64 number_of_frames_processed = 1;
inline bool TraceSession_SessionStatistic::has_number_of_frames_processed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TraceSession_SessionStatistic::set_has_number_of_frames_processed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TraceSession_SessionStatistic::clear_has_number_of_frames_processed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TraceSession_SessionStatistic::clear_number_of_frames_processed() {
  number_of_frames_processed_ = GOOGLE_ULONGLONG(0);
  clear_has_number_of_frames_processed();
}
inline ::google::protobuf::uint64 TraceSession_SessionStatistic::number_of_frames_processed() const {
  // @@protoc_insertion_point(field_get:fbt_format.TraceSession.SessionStatistic.number_of_frames_processed)
  return number_of_frames_processed_;
}
inline void TraceSession_SessionStatistic::set_number_of_frames_processed(::google::protobuf::uint64 value) {
  set_has_number_of_frames_processed();
  number_of_frames_processed_ = value;
  // @@protoc_insertion_point(field_set:fbt_format.TraceSession.SessionStatistic.number_of_frames_processed)
}

// required float avg_throughput_mb_per_sec = 2;
inline bool TraceSession_SessionStatistic::has_avg_throughput_mb_per_sec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TraceSession_SessionStatistic::set_has_avg_throughput_mb_per_sec() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TraceSession_SessionStatistic::clear_has_avg_throughput_mb_per_sec() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TraceSession_SessionStatistic::clear_avg_throughput_mb_per_sec() {
  avg_throughput_mb_per_sec_ = 0;
  clear_has_avg_throughput_mb_per_sec();
}
inline float TraceSession_SessionStatistic::avg_throughput_mb_per_sec() const {
  // @@protoc_insertion_point(field_get:fbt_format.TraceSession.SessionStatistic.avg_throughput_mb_per_sec)
  return avg_throughput_mb_per_sec_;
}
inline void TraceSession_SessionStatistic::set_avg_throughput_mb_per_sec(float value) {
  set_has_avg_throughput_mb_per_sec();
  avg_throughput_mb_per_sec_ = value;
  // @@protoc_insertion_point(field_set:fbt_format.TraceSession.SessionStatistic.avg_throughput_mb_per_sec)
}

// required sint64 med_frame_processing_time_per_frame_ns = 3;
inline bool TraceSession_SessionStatistic::has_med_frame_processing_time_per_frame_ns() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TraceSession_SessionStatistic::set_has_med_frame_processing_time_per_frame_ns() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TraceSession_SessionStatistic::clear_has_med_frame_processing_time_per_frame_ns() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TraceSession_SessionStatistic::clear_med_frame_processing_time_per_frame_ns() {
  med_frame_processing_time_per_frame_ns_ = GOOGLE_LONGLONG(0);
  clear_has_med_frame_processing_time_per_frame_ns();
}
inline ::google::protobuf::int64 TraceSession_SessionStatistic::med_frame_processing_time_per_frame_ns() const {
  // @@protoc_insertion_point(field_get:fbt_format.TraceSession.SessionStatistic.med_frame_processing_time_per_frame_ns)
  return med_frame_processing_time_per_frame_ns_;
}
inline void TraceSession_SessionStatistic::set_med_frame_processing_time_per_frame_ns(::google::protobuf::int64 value) {
  set_has_med_frame_processing_time_per_frame_ns();
  med_frame_processing_time_per_frame_ns_ = value;
  // @@protoc_insertion_point(field_set:fbt_format.TraceSession.SessionStatistic.med_frame_processing_time_per_frame_ns)
}

// optional float avg_millisecs_per_frame = 4;
inline bool TraceSession_SessionStatistic::has_avg_millisecs_per_frame() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TraceSession_SessionStatistic::set_has_avg_millisecs_per_frame() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TraceSession_SessionStatistic::clear_has_avg_millisecs_per_frame() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TraceSession_SessionStatistic::clear_avg_millisecs_per_frame() {
  avg_millisecs_per_frame_ = 0;
  clear_has_avg_millisecs_per_frame();
}
inline float TraceSession_SessionStatistic::avg_millisecs_per_frame() const {
  // @@protoc_insertion_point(field_get:fbt_format.TraceSession.SessionStatistic.avg_millisecs_per_frame)
  return avg_millisecs_per_frame_;
}
inline void TraceSession_SessionStatistic::set_avg_millisecs_per_frame(float value) {
  set_has_avg_millisecs_per_frame();
  avg_millisecs_per_frame_ = value;
  // @@protoc_insertion_point(field_set:fbt_format.TraceSession.SessionStatistic.avg_millisecs_per_frame)
}

// -------------------------------------------------------------------

// TraceSession

// required string name = 1;
inline bool TraceSession::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TraceSession::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TraceSession::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TraceSession::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TraceSession::name() const {
  // @@protoc_insertion_point(field_get:fbt_format.TraceSession.name)
  return *name_;
}
inline void TraceSession::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:fbt_format.TraceSession.name)
}
inline void TraceSession::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:fbt_format.TraceSession.name)
}
inline void TraceSession::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fbt_format.TraceSession.name)
}
inline ::std::string* TraceSession::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:fbt_format.TraceSession.name)
  return name_;
}
inline ::std::string* TraceSession::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TraceSession::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:fbt_format.TraceSession.name)
}

// required .fbt_format.OpenGLInfo opengl_info = 2;
inline bool TraceSession::has_opengl_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TraceSession::set_has_opengl_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TraceSession::clear_has_opengl_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TraceSession::clear_opengl_info() {
  if (opengl_info_ != NULL) opengl_info_->::fbt_format::OpenGLInfo::Clear();
  clear_has_opengl_info();
}
inline const ::fbt_format::OpenGLInfo& TraceSession::opengl_info() const {
  // @@protoc_insertion_point(field_get:fbt_format.TraceSession.opengl_info)
  return opengl_info_ != NULL ? *opengl_info_ : *default_instance_->opengl_info_;
}
inline ::fbt_format::OpenGLInfo* TraceSession::mutable_opengl_info() {
  set_has_opengl_info();
  if (opengl_info_ == NULL) opengl_info_ = new ::fbt_format::OpenGLInfo;
  // @@protoc_insertion_point(field_mutable:fbt_format.TraceSession.opengl_info)
  return opengl_info_;
}
inline ::fbt_format::OpenGLInfo* TraceSession::release_opengl_info() {
  clear_has_opengl_info();
  ::fbt_format::OpenGLInfo* temp = opengl_info_;
  opengl_info_ = NULL;
  return temp;
}
inline void TraceSession::set_allocated_opengl_info(::fbt_format::OpenGLInfo* opengl_info) {
  delete opengl_info_;
  opengl_info_ = opengl_info;
  if (opengl_info) {
    set_has_opengl_info();
  } else {
    clear_has_opengl_info();
  }
  // @@protoc_insertion_point(field_set_allocated:fbt_format.TraceSession.opengl_info)
}

// required string local_time = 3;
inline bool TraceSession::has_local_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TraceSession::set_has_local_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TraceSession::clear_has_local_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TraceSession::clear_local_time() {
  if (local_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    local_time_->clear();
  }
  clear_has_local_time();
}
inline const ::std::string& TraceSession::local_time() const {
  // @@protoc_insertion_point(field_get:fbt_format.TraceSession.local_time)
  return *local_time_;
}
inline void TraceSession::set_local_time(const ::std::string& value) {
  set_has_local_time();
  if (local_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    local_time_ = new ::std::string;
  }
  local_time_->assign(value);
  // @@protoc_insertion_point(field_set:fbt_format.TraceSession.local_time)
}
inline void TraceSession::set_local_time(const char* value) {
  set_has_local_time();
  if (local_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    local_time_ = new ::std::string;
  }
  local_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:fbt_format.TraceSession.local_time)
}
inline void TraceSession::set_local_time(const char* value, size_t size) {
  set_has_local_time();
  if (local_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    local_time_ = new ::std::string;
  }
  local_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fbt_format.TraceSession.local_time)
}
inline ::std::string* TraceSession::mutable_local_time() {
  set_has_local_time();
  if (local_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    local_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:fbt_format.TraceSession.local_time)
  return local_time_;
}
inline ::std::string* TraceSession::release_local_time() {
  clear_has_local_time();
  if (local_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = local_time_;
    local_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TraceSession::set_allocated_local_time(::std::string* local_time) {
  if (local_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete local_time_;
  }
  if (local_time) {
    set_has_local_time();
    local_time_ = local_time;
  } else {
    clear_has_local_time();
    local_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:fbt_format.TraceSession.local_time)
}

// repeated .fbt_format.StageTrace stage_traces = 4;
inline int TraceSession::stage_traces_size() const {
  return stage_traces_.size();
}
inline void TraceSession::clear_stage_traces() {
  stage_traces_.Clear();
}
inline const ::fbt_format::StageTrace& TraceSession::stage_traces(int index) const {
  // @@protoc_insertion_point(field_get:fbt_format.TraceSession.stage_traces)
  return stage_traces_.Get(index);
}
inline ::fbt_format::StageTrace* TraceSession::mutable_stage_traces(int index) {
  // @@protoc_insertion_point(field_mutable:fbt_format.TraceSession.stage_traces)
  return stage_traces_.Mutable(index);
}
inline ::fbt_format::StageTrace* TraceSession::add_stage_traces() {
  // @@protoc_insertion_point(field_add:fbt_format.TraceSession.stage_traces)
  return stage_traces_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fbt_format::StageTrace >&
TraceSession::stage_traces() const {
  // @@protoc_insertion_point(field_list:fbt_format.TraceSession.stage_traces)
  return stage_traces_;
}
inline ::google::protobuf::RepeatedPtrField< ::fbt_format::StageTrace >*
TraceSession::mutable_stage_traces() {
  // @@protoc_insertion_point(field_mutable_list:fbt_format.TraceSession.stage_traces)
  return &stage_traces_;
}

// optional .fbt_format.TraceSession.SessionStatistic session_statistic = 5;
inline bool TraceSession::has_session_statistic() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TraceSession::set_has_session_statistic() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TraceSession::clear_has_session_statistic() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TraceSession::clear_session_statistic() {
  if (session_statistic_ != NULL) session_statistic_->::fbt_format::TraceSession_SessionStatistic::Clear();
  clear_has_session_statistic();
}
inline const ::fbt_format::TraceSession_SessionStatistic& TraceSession::session_statistic() const {
  // @@protoc_insertion_point(field_get:fbt_format.TraceSession.session_statistic)
  return session_statistic_ != NULL ? *session_statistic_ : *default_instance_->session_statistic_;
}
inline ::fbt_format::TraceSession_SessionStatistic* TraceSession::mutable_session_statistic() {
  set_has_session_statistic();
  if (session_statistic_ == NULL) session_statistic_ = new ::fbt_format::TraceSession_SessionStatistic;
  // @@protoc_insertion_point(field_mutable:fbt_format.TraceSession.session_statistic)
  return session_statistic_;
}
inline ::fbt_format::TraceSession_SessionStatistic* TraceSession::release_session_statistic() {
  clear_has_session_statistic();
  ::fbt_format::TraceSession_SessionStatistic* temp = session_statistic_;
  session_statistic_ = NULL;
  return temp;
}
inline void TraceSession::set_allocated_session_statistic(::fbt_format::TraceSession_SessionStatistic* session_statistic) {
  delete session_statistic_;
  session_statistic_ = session_statistic;
  if (session_statistic) {
    set_has_session_statistic();
  } else {
    clear_has_session_statistic();
  }
  // @@protoc_insertion_point(field_set_allocated:fbt_format.TraceSession.session_statistic)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fbt_format

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::fbt_format::StageTrace_EventType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fbt_format::StageTrace_EventType>() {
  return ::fbt_format::StageTrace_EventType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_fbt_5fformat_2eproto__INCLUDED

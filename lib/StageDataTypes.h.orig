#ifndef TOA_FRAME_BENDER_STAGE_DATA_TYPES_H
#define TOA_FRAME_BENDER_STAGE_DATA_TYPES_H

#include <vector>

#include "ImageFormat.h"
#include <glad/glad.h>
#include "FrameTime.h"
#include "Frame.h"

namespace toa {

    namespace frame_bender {

        class StreamComposition;

        struct PboMemory {
            GLuint pbo_id;
            PboMemory() : pbo_id(0) {}
            PboMemory(GLuint pbo_id):
                pbo_id(pbo_id) {}
        };

        typedef std::vector<PboMemory> PboMemVector;

        struct TokenGL {

            GLsync gl_fence;
            GLuint id; // Could be PBO id or TEX id
            ImageFormat format;
            StreamComposition* composition;
            GLuint fbo_id;
            Time time_stamp;
            uint8_t* buffer;

            TokenGL() : 
                gl_fence(nullptr), 
                id(0), 
                format(ImageFormat::kInvalid()),
                composition(nullptr),
                fbo_id(0),
                time_stamp(0, 1),
                buffer(nullptr) {}

            TokenGL(GLsync gl_fence, 
                    GLuint id,
                    ImageFormat format, 
                    Time time_stamp,
                    GLuint fbo_id,
                    StreamComposition* composition,
                    uint8_t* buffer) 
                    :   gl_fence(gl_fence), 
                        id(id),
                        format(format),
                        composition(composition),
                        fbo_id(fbo_id),
                        time_stamp(time_stamp),
                        buffer(buffer) {}
        };

        // TODO-C++11: replace with =default or =delete

        struct TokenFrame {

            Frame frame;
            StreamComposition* composition;

            TokenFrame() : composition(nullptr) {}
            TokenFrame(Frame f, StreamComposition* c) : 
                frame(std::move(f)), composition(c) {}

            TokenFrame& operator=(TokenFrame&& other) {
                this->frame = std::move(other.frame);
                this->composition = other.composition;
                other.composition = nullptr;
                return *this;
            }

            TokenFrame(TokenFrame&& other) :
                frame(std::move(other.frame)),
                composition(other.composition) {
                    other.composition = nullptr;
            }

        private:
            TokenFrame& operator=(const TokenFrame&);
            TokenFrame(const TokenFrame&);
        };

    }

}

#endif // TOA_FRAME_BENDER_STAGE_DATA_TYPES_H
